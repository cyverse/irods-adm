#!/bin/bash

show_help() {
	cat <<EOF

$EXEC_NAME version $VERSION

Usage:
 $EXEC_NAME [options]

This program replicates data objects that were created before yesterday. It only
replicates objects to the DEST-RESC if a replica doesn't already exist there. It
writes progress to standard error and all messages, error or otherwise, to
standard out.

This works with iRODS 4.2.8 or later.

Options:
 -A, --age AGE                   how many days old a data object must be to be
                                 replicated, default: 1
 -C, --collection COLLECTION     only replicate the data objects in this 
                                 collection
 -h, --help                      show help and exit
 -H, --host HOST                 connect to the ICAT's DBMS on the host HOST
                                 instead of the PostgreSQL default
 -N, --max-transfer-threads MAX  sets the maximum number of threads for parallel
                                 replication to MAX; if MAX is 0 replication 
                                 will be streaming.
 -M, --multiplier MULTIPLIER     a multiplier on the number of processes to run 
                                 at once, default: 1
 -P, --port PORT                 connect to the ICAT's DBMS listening on TCP 
                                 port PORT instead of the PostgreSQL default
 -R, --dest-resc DEST-RESC       replicate data objects to resource DEST-RESC
                                 instead of default replication resource
 -S, --src-resc SRC-RESC         only replicate the data objects with a file on 
                                 the resource SRC-RESC
 -u, --until STOP-TIME           the time to stop replication in a format
                                 understandable by \`date\`
 -U, --user USER                 authorize the DBMS connection as user USER 
                                 instead of the default
 -v, --verison                   show version and exit

Environment Variables:
 PGHOST  the default PostgreSQL host
 PGPORT  the default PostgreSQL listening port
 PGUSER  the default PostgreSQL user for authorizating the ICAT DB connection 

Output:
The program echos the output of the underlying \`irepl -v\` calls to stdout. It
writes overall progress to stderr in way suitable for display on a terminal. 

Prerequisites:
 1) The user must be initialized with iRODS as an admin user.
 2) The user must be able to connect to the ICAT DB without providing a
    password.

Â© 2021, The Arizona Board of Regents on behalf of The University of Arizona. For
license information, see https://cyverse.org/license.
EOF
}


readonly VERSION=7

set -o errexit -o nounset -o pipefail

export PGHOST PGPORT PGUSER

export TIMEDOUT=3

readonly DEFAULT_AGE=1
readonly DEFAULT_MAX_TRANSFER_THREADS=3
readonly DEFAULT_PROC_MULT=1
readonly EXEC_NAME="$(basename "$(realpath --canonicalize-missing "$0")")"
readonly LOG=3
readonly TRANSFER_BUF_SZ=100


main() {
	declare -A optMap=(
		[age]="$DEFAULT_AGE"
		[collection]=''
		[dest-resc]=''
		[help]=''
		[max-transfer-threads]="$DEFAULT_MAX_TRANSFER_THREADS"
		[multiplier]="$DEFAULT_PROC_MULT"
		[src-resc]=''
		[until]=''
		[version]='' )

	if ! resolve_opts optMap "$@"; then
		show_help >&2
		return 1
	fi

	if [[ -n "${optMap[help]}" ]]; then
		show_help
	elif [[ -n "${optMap[version]}" ]]; then
		printf '%s\n' "$VERSION"
	else
		replicate \
			"${optMap[age]}"  \
			"${optMap[max-transfer-threads]}" \
			"${optMap[multiplier]}" \
			"${optMap[collection]}" \
			"${optMap[src-resc]}" \
			"${optMap[dest-resc]}" \
			"${optMap[until]}"
	fi
}


resolve_opts() {
	local mapVar="$1"
	shift

	local opts
	if ! opts="$(format_opts "$@")"; then
		return 1
	fi

	eval set -- "$opts"

	while true; do
		case "$1" in
			-A|--age)
				eval "$mapVar""[age]='$2'"
				shift 2
				;;
			-C|--collection)
				eval "$mapVar""[collection]='$2'"
				shift 2
				;;
			-h|--help)
				eval "$mapVar"'[help]=help'
				shift 1
				;;
			-H|--host)
				PGHOST="$2"
				shift 2
				;;
			-M|--multiplier)
				eval "$mapVar""[multiplier]='$2'"
				shift 2
				;;
			-N|--max-transfer-threads)
				eval "$mapVar""[max-transfer-threads]='$2'"
				shift 2
				;;
			-P|--port)
				PGPORT="$2"
				shift 2
				;;
			-R|--dest-resc)
				eval "$mapVar""[dest-resc]='$2'"
				shift 2
				;;
			-S|--src-resc)
				eval "$mapVar""[src-resc]='$2'"
				shift 2
				;;
			-u|--until)
				eval "$mapVar""[until]='$2'"
				shift 2
				;;
			-U|--user)
				PGUSER="$2"
				shift 2
				;;
			-v|--version)
				eval "$mapVar"'[version]=version'
				shift 1
				;;
			--)
				shift
				break
				;;
			*)
				printf 'INTERNAL ERROR: Failed to resolve command line options\n' >&2
				return 1
				;;
		esac
	done
}


replicate() {
	local age="$1"
	local maxTransThreads="$2"
	local procMult="$3"
	local baseColl="$4"
	local srcResc="$5"
	local destResc="$6"
	local until="$7"

	if [[ -n "$procMult" ]]; then
		if ! [[ "$procMult" =~ ^[1-9][0-9]* ]]; then
			printf 'The multiplier must be a positive number. The given value was %s.\n' "$procMult" \
				>&2

			return 1
		fi
	fi

	if [[ -n "$destResc" && "$srcResc" == "$destResc" ]]; then
		printf 'The destination resource, %s, cannot be the same as the source resource, %s.\n' \
		    "$destResc" "$srcResc" \
			>&2

		return 1
	fi

	local untilTS=
	if [[ -n "$until" ]]; then
		if ! untilTS="$(date --date="$until" '+%s')"; then
			printf '"%s" is not a valid date format\n' "$until"
			return 1
		fi
	fi

	# Redirect stdout to FD 3 to use as a logging channel
	eval "exec $LOG>&1"

	local objList
	objList="$(mktemp)"

	trap 'finish "$?" '"'$objList'" EXIT

	if ! iadmin lz &> /dev/null; then
		printf "aren't authenticated as a rodsadmin user\n" >&2
		return 1
	fi

	if ! psql ICAT <<<'' &> /dev/null; then
		printf "aren't able to connect to the ICAT DB without a password\n" >&2
		return 1
	fi

	if ! CHECK_TIME "$untilTS"; then
	 printf 'Stop time is in the past\n' >&2
	 return 1
	fi

	printf 'Retrieving data objects to replicate...\n' >&2

	local maxCreateDate
	maxCreateDate="$(date --iso-8601 --date "$age days ago")"

	local maxCreateTime
	maxCreateTime="$(date --date "$maxCreateDate" '+%s')"

	local resCond
	if [[ -n "$srcResc" ]]; then
		resCond="$(mk_resc_cond "$srcResc")"
	elif [[ -n "$destResc" ]]; then
		resCond="$(mk_resc_cond "$destResc")"
	else
		resCond=TRUE
	fi

	local baseCond
	if [[ -n "$baseColl" ]]; then
		baseCond="c.coll_name = '$baseColl' OR c.coll_name LIKE '$baseColl/%'"
	else
		baseCond=TRUE
	fi

	local replQuery
	replQuery="$(mk_repl_query "$maxCreateTime" "$baseCond" "$resCond")"

	psql \
			--no-align --tuples-only --record-separator-zero \
			--command "$replQuery" --field-separator ' ' \
			ICAT \
		> "$objList"

	local tot
	tot="$(count < "$objList")"
	printf '%d data objects to replicate\n' "$tot" >&2

	if [[ "$tot" -gt 0 ]]; then
		if [[ "$maxTransThreads" -gt 0 ]]; then
			local cnt=0

			# Small non-zero byte files
			cnt="$(\
				select_cohort "$cnt" "$tot" "$srcResc" "$destResc" "$procMult" 16 200 0 1 "$untilTS" \
			  		< "$objList" )"    # 16 1-threaded transfers

      	if [[ "$maxTransThreads" -ge 2 ]]; then
				cnt="$(\
					select_cohort "$cnt" "$tot" "$srcResc" "$destResc" "$procMult" 8 100 1 2 "$untilTS" \
				  		< "$objList" )"  # 8 2-threaded
      	fi

			if [[ "$maxTransThreads" -ge 3 ]]; then
				cnt="$(\
					select_cohort "$cnt" "$tot" "$srcResc" "$destResc" "$procMult" 6 50 2 3 "$untilTS" \
						< "$objList" )"  # 6 3-threaded
			fi

			if [[ "$maxTransThreads" -ge 5 ]]; then
				cnt="$(\
					select_cohort "$cnt" "$tot" "$srcResc" "$destResc" "$procMult" 4 20 3 5 "$untilTS" \
						< "$objList" )"  # 4 4--5-threaded
			fi

			if [[ "$maxTransThreads" -ge 7 ]]; then
				cnt="$(\
					select_cohort "$cnt" "$tot" "$srcResc" "$destResc" "$procMult" 3 10 5 7 "$untilTS" \
						< "$objList" )"  # 3 6--7-threaded
			fi

			if [[ "$maxTransThreads" -ge 15 ]]; then
				cnt="$(\
					select_cohort "$cnt" "$tot" "$srcResc" "$destResc" "$procMult" 2 5 7 15 "$untilTS" \
						< "$objList" )"  # 2 8--15-threaded
			fi

			# Large file transfers
			local minSize
			minSize="$(threads_to_MB "$maxTransThreads")"

			local lastCohortMinSz=$(( TRANSFER_BUF_SZ * (16 - 1) ))

			# transfer remaining files not in last Cohort
			if (( minSize < lastCohortMinSz )); then
				cnt="$(\
					select_cohort_by_size \
							"$cnt" \
							"$tot" \
							"$srcResc" \
							"$destResc" \
							"$procMult" \
							"$maxTransThreads" \
							"$untilTS" \
							"$minSize" \
							"$lastCohortMinSz" \
						< "$objList" )" 
			fi

			# last cohort transfers
			cnt="$(\
				select_cohort_by_size \
						"$cnt" \
						"$tot" \
						"$srcResc" \
						"$destResc" \
						"$procMult" \
						"$maxTransThreads" \
						"$untilTS" \
						"$lastCohortMinSz" \
					< "$objList" )"

			# zero byte files
			cnt="$(\
				select_cohort "$cnt" "$tot" "$srcResc" "$destResc" "$procMult" 8 100 0 0 "$untilTS" \
					< "$objList" )"  # 8 1-threaded transfers
		else
			select_cohort 0 "$tot" "$srcResc" "$destResc" "$procMult" 16 2 -1 -1 "$untilTS" \
				< "$objList" \
				> /dev/null
		fi
	fi
}


format_opts() {
	local longOpts=(
		age: 
		collection: 
		help 
		host: 
		max-transfer-threads: 
		multiplier: 
		port: 
		dest-resc: 
		src-resc: 
		until: 
		user:
		version )

	local longOptsStr
	longOptsStr="$(printf '%s\n' "${longOpts[@]}" | paste --serial --delimiter=,)"
	getopt --name "$EXEC_NAME" --longoptions "$longOptsStr" --options A:C:hH:M:N:P:R:S:u:U:v -- "$@"
}


finish() {
	local exitCode="$1"
	local objList="$2"

	rm --force "$objList"
	eval "exec 1>&$LOG $LOG>&-"

	if [[ "$exitCode" -eq "$TIMEDOUT" ]]; then
		printf 'out of time\n' >&2
		exit 0
	fi

	exit "$exitCode"
}


count() {
	local tot=0

	while read -r -d ''; do
		((tot++))
	done

	echo "$tot"
}


partition() {
	local minSizeB="$1"

	local maxSizeB=
	if [[ "$#" -ge 2 ]]; then
		maxSizeB="$2"
	fi

	local size
	if [[ -n "$maxSizeB" ]]; then
		while IFS= read -r -d ''; do
			size="${REPLY%% *}"

			if [[ $size -ge $minSizeB && $size -lt $maxSizeB ]]; then
				printf '%s\0' "${REPLY#* }"
			fi
		done
	else
		while IFS= read -r -d ''; do
			size="${REPLY%% *}"

			if [[ $size -ge $minSizeB ]]; then
				printf '%s\0' "${REPLY#* }"
			fi
		done
	fi
}


mk_prog_msg() {
	local count="$1"
	local total="$2"
	local subCount="$3"
	local subTotal="$4"

	printf 'cohort: %0*d/%d, all: %0*d/%d' \
		${#subTotal} "$subCount" "$subTotal" ${#total} "$count" "$total"
}


mk_resc_cond() {
	local resc="$1"

cat <<SQL
d.resc_id IN (
	WITH RECURSIVE child_mapping AS (
		SELECT resc_id AS id, (resc_net != 'EMPTY_RESC_HOST') AS storage, resc_name AS root 
			FROM r_resc_main 
			WHERE resc_name = '$resc'
		UNION SELECT r.resc_id, r.resc_net != 'EMPTY_RESC_HOST', m.root 
			FROM r_resc_main AS r JOIN child_mapping AS m ON m.id::TEXT = r.resc_parent )
	SELECT id FROM child_mapping WHERE storage )
SQL
}


mk_repl_query() {
	local maxTime="$1"
	local baseCond="$2"
	local resCond="$3"

	cat <<EOSQL
SELECT d.data_size, c.coll_name || '/' || d.data_name
FROM r_data_main AS d JOIN r_coll_main AS c ON c.coll_id = d.coll_id
WHERE d.data_id IN (SELECT data_id FROM r_data_main GROUP BY data_id HAVING COUNT(resc_id) = 1)
	AND d.create_ts < '0$maxTime'
	AND ($baseCond)
	AND ($resCond)
EOSQL
}


track_prog() {
	local cnt="$1"
	local tot="$2"
	local subTot="$3"

	local subCnt=0

	local msg
	msg="$(mk_prog_msg "$cnt" "$tot" "$subCnt" "$subTot")"

	printf '%s' "$msg" >&2

	while read -r; do
		if [[ "$REPLY" != 'cliReconnManager: '* ]]; then
			((subCnt++))
			((cnt++))
			printf '\r%*s\r' ${#msg} '' >&2
			msg="$(mk_prog_msg "$cnt" "$tot" "$subCnt" "$subTot")"
			printf '%s' "$msg" >&2
		fi
	done

	printf '\r%*s\r' ${#msg} '' >&2
	msg="$(mk_prog_msg "$cnt" "$tot" "$subCnt" "$subTot")"
	printf '%s\n' "$msg" >&2
	printf '%s' "$cnt"
}


select_cohort() {
	local cnt="$1"
	local tot="$2"
	local srcResc="$3"
	local destResc="$4"
	local procMult="$5"
	local maxProcs="$6"
	local maxArgs="$7"
	local minTransThreads="$8"
	local maxTransThreads="$9"
	local untilTS="${10}"

	if ! CHECK_TIME "$untilTS"; then
		return "$TIMEDOUT"
	fi

	local maxSizeB maxSizeMiB minSizeB minSizeMiB
	if [[ "$maxTransThreads" -eq -1 ]]; then
		maxTransThreads=0
		minSizeMiB=0
		minSizeB=0
		maxSizeMiB=
		maxSizeB=
	elif [[ "$maxTransThreads" -eq 0 ]]; then
		minSizeMiB=0
		minSizeB=0
		maxSizeMiB=0
		maxSizeB=1
	elif [[ "$minTransThreads" -eq 0 ]]; then
		minSizeMiB=0
		minSizeB=1
		maxSizeMiB="$(threads_to_MB "$maxTransThreads")"
		maxSizeB=$((maxSizeMiB * ((1024 ** 2))))
	else
		minSizeMiB="$(threads_to_MB "$minTransThreads")"
		minSizeB=$((minSizeMiB * ((1024 ** 2))))
		maxSizeMiB="$(threads_to_MB "$maxTransThreads")"
		maxSizeB=$((maxSizeMiB * ((1024 ** 2))))
	fi

	local cohortList
	cohortList="$(mktemp)"

	if [[ -n "$maxSizeB" ]]; then
		partition "$minSizeB" "$maxSizeB"
	else
		partition "$minSizeB"
	fi > "$cohortList"

	local subTotal
	subTotal="$(count <"$cohortList")"

	if [[ "$minSizeMiB" -le 0 ]] && [[ -z "$maxSizeMiB" ]]; then
		printf 'Replicating %s files\n' "$subTotal"
	elif [[ "$minSizeMiB" -le 0 ]] && [[ "$maxSizeMiB" -le 0 ]]; then
		printf 'Replicating %s files with size 0 MiB\n' "$subTotal"
	elif [[ "$minSizeMiB" -le 0 ]]; then
		printf 'Replicating %s files with size in (0, %s) MiB\n' "$subTotal" "$maxSizeMiB"
	else
		printf 'Replicating %s files with size in [%s, %s) MiB\n' \
			"$subTotal" "$minSizeMiB" "$maxSizeMiB"
	fi >&2

	if [[ "$subTotal" -gt 0 ]]; then
		maxProcs=$((maxProcs * procMult))

		parallel --no-notice --null --halt 2 --max-args "$maxArgs" --max-procs "$maxProcs" \
					REPL_BATCH "'$srcResc'" "'$destResc'" "'$maxTransThreads'" "'$untilTS'" \
				< "$cohortList" \
				2>&"$LOG" \
			| tee >(cat >&"$LOG") \
			| track_prog "$cnt" "$tot" "$subTotal"
	else
		printf '%s\n' "$cnt"
	fi

	rm --force "$cohortList"
}


# This is intended for large files. irepl will be run on at most two files at a
# time.
select_cohort_by_size() {
	local cnt="$1"
	local tot="$2"
	local srcResc="$3"
	local destResc="$4"
	local procMult="$5"
	local maxTransThreads="$6"
	local untilTS="$7"
	local minSizeMiB="$8"

	local maxSizeMiB=
	if [[ "$#" -ge 9 ]]; then
		maxSizeMiB="$9"
	fi

	local maxProcs=1

	if ! CHECK_TIME "$untilTS"; then
		return "$TIMEDOUT"
	fi

	local minSizeB=$((minSizeMiB * 1024 ** 2))
	local maxSizeB=$((maxSizeMiB * 1024 ** 2))

	local cohortList
	cohortList="$(mktemp)"

	if [[ -n "$maxSizeMiB" ]]; then
		local maxSizeB=$((maxSizeMiB * ((1024 ** 2))))
		partition "$minSizeB" "$maxSizeB"
	else
		partition "$minSizeB"
	fi > "$cohortList"

	local subTotal
	subTotal="$(count < "$cohortList")"

	if [[ -n "$maxSizeMiB" ]]; then
		printf 'Replicating %s files with size in [%s, %s) MiB\n' \
				"$subTotal" "$minSizeMiB" "$maxSizeMiB" \
			>&2
	else
		printf 'Replicating %s files with size >= %s MiB\n' "$subTotal" "$minSizeMiB" >&2
	fi

	if [[ "$subTotal" -gt 0 ]]; then
		maxProcs=$((maxProcs * procMult))

		parallel --no-notice --null --halt 2 --max-args 2 --max-procs "$maxProcs" \
					REPL_BATCH "'$srcResc'" "'$destResc'" "'$maxTransThreads'" "'$untilTS'" \
				< "$cohortList" \
				2>&"$LOG" \
			| tee >(cat >&"$LOG") \
			| track_prog "$cnt" "$tot" "$subTotal"
	else
		printf '%s\n' "$cnt"
	fi

	rm --force "$cohortList"
}


threads_to_MB() {
  local threads="$1"

	echo $(( threads * TRANSFER_BUF_SZ ))
}


REPL_BATCH() {
	set -o errexit -o nounset -o pipefail

	local srcResc="$1"
	local destResc="$2"
	local maxTransThreads="$3"
	local untilTS="$4"
	shift 4

	CHECK_TIME "$untilTS"

	local replArgs=(-B -M -T -v -N "$maxTransThreads")

	if [[ -n "$destResc" ]]; then
		replArgs+=(-R "$destResc")
	fi

	# XXX - irepl -S doesn't work in 4.2.8, but it's fixed in 4.2.9
	#if [[ -n "$srcResc" ]]; then
   #	replArgs+=(-S "$srcResc")
	#fi

	local replStatus=0
	irepl "${replArgs[@]}" "$@" || replStatus="$?"

	# TODO: Trying to figure out the irepl error code for when irepl logs a
	# '_rcConnect: connectToRhost error, server on data.cyverse.org:1247 is
	# probably down status = -305113 USER_SOCK_CONNECT_ERR, No route to host'
	# error message. It is probably at 113, but we should confirm. Once this is
	# confirmed, if this status is returned, this function	should wait for a bit
	# and try again.
	if [[ "$replStatus" -ne 0 ]]; then
		printf 'repl: irepl exited with status %d\n' "$replStatus" >&2
	fi

	exit 0
}
export -f REPL_BATCH


CHECK_TIME() {
	local untilTS="$1"

	if [[ -n "$untilTS" ]] && [[ "$(date '+%s')" -ge "$untilTS" ]]; then
		return "$TIMEDOUT"
	fi
}
export -f CHECK_TIME


main "$@"
