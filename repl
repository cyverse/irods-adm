#!/bin/bash

show_help()
{
# shellcheck disable=SC2006
	cat <<EOF

$ExecName version $Version

Usage:
 $ExecName [options] <dest_resc>

replicates data objects

Parameters:
 <dest_resc>  the resource where the files will be replicated

Options:
 -A, --age <age>                how many days old a data object must be to be
                                replicated, default: 1
 -c, --collection <collection>  only replicate the data objects in this
                                collection
 -H, --host <host>              connect to the ICAT's DBMS on the host <host>
                                instead of the PostgreSQL default
 -h, --help                     show help and exit
 -m, --multiplier <multiplier>  a multiplier on the number of processes to run
                                at once, default: 1
 -N, --max-threads <max>        sets the maximum number of threds to use in
                                parallel replication to <max>; if <max> is 0,
																replication is streaming.
 -P, --port <port>              connect to the ICAT's DBMS listening on TCP port
                                <port> instead of the PostgreSQL default
 -r, --resource <resource>      only replicate the data objects with a file on
                                this resource
 -s, --serial                   disable parallel transport
 -u, --until <stop_time>        the time to stop replication in a format
                                understandable by `date`
 -U, --user <user>              authorize the DBMS connection as user <user>
                                instead of the default
 -v, --verison                  show version and exit

Summary:
This program replicates data objects that were created before yesterday. It only
replicates objects to the <dest_resc> if a replica doesn't already exist there.
It writes progress to standard error and all messages, error or otherwise, to
standard out.

Prerequisites:
 1) The user must be initialized with iRODS as an admin user.
 2) The user must be able to connect to the ICAT DB without providing a
    password.
EOF
}


readonly Version=2

set -o errexit -o nounset -o pipefail

# Ensure these are declared for PostgreSQL
export PGHOST
export PGPORT
export PGUSER

export TIMEDOUT=3

readonly ExecPath=$(readlink --canonicalize "$0")
readonly ExecName=$(basename "$ExecPath")
readonly Log=3


main()
{
	local opts
	opts=$( \
		getopt \
			--name "$ExecName" \
			--longoptions \
				age:,collection:,help,host:,max-threads:,multiplier:,port:,resource:,serial,until:,user:,version \
			--options A:c:hH:m:N:P:r:su:U:v \
			-- \
			"$@")
	local ret="$?"
	if [[ "$ret" -ne 0 ]]
	then
		exit_with_help
	fi

	eval set -- "$opts"

	local age=1
	local baseColl=
	local maxThreads=16
	local procMult=1
	# TODO get rid of serial
	local serial=
	local srcRes=
	local stopTime=

	while true
	do
		case "$1" in
			-A|--age)
				age="$2"
				shift 2
				;;
			-c|--collection)
				baseColl="$2"
				shift 2
				;;
			-h|--help)
				show_help
				exit 0
				;;
			-H|--host)
				PGHOST="$2"
				shift 2
				;;
			-m|--multiplier)
				procMult="$2"
				shift 2
				;;
			-N|--max-threads)
			  maxThreads="$2"
				shift 2
				;;
			-P|--port)
				PGPORT="$2"
				shift 2
				;;
			-r|--resource)
				srcRes="$2"
				shift 2
				;;
			-s|--serial)
				serial=true
				shift
				;;
			-u|--until)
				stopTime="$2"
				shift 2
				;;
			-U|--user)
				PGUSER="$2"
				shift 2
				;;
			-v|--version)
  			printf '%s\n' "$Version"
				exit 0
				;;
			--)
				shift
				break
				;;
			*)
				exit_with_help
				;;
		esac
	done

	if [[ "$#" -lt 1 ]]
	then
		exit_with_help
	fi

	local destResc="$1"

	if [[ -n "$procMult" ]]
	then
		if ! [[ "$procMult" =~ ^[1-9][0-9]* ]]
		then
			printf \
					'The -m option value must be a positive number. The given value was %s.\n' \
					"$procMult" \
				>&2
			exit 1
		fi
	fi

	local untilTS=
	if [[ -n "$stopTime" ]]
	then
		if ! untilTS=$(date --date="$stopTime" '+%s')
		then
			printf '%s is not a valid date format\n' "$stopTime"
			exit 1
		fi
	fi

	# Redirect stdout to FD 3 to use as a logging channel
	eval "exec $Log>&1"

	local objList
	objList=$(mktemp)

	#shellcheck disable=SC2064
	trap 'finish "$?" '"'$objList'" EXIT

	if ! iadmin lz &> /dev/null
	then
		printf "aren't authenticated as a rodsadmin user\n" >&2
		exit 1
	fi

	if ! psql ICAT <<<'' &> /dev/null
	then
		printf "aren't able to connect to the ICAT DB without a password\n" >&2
		exit 1
	fi

	if ! CHECK_TIME "$untilTS"
	then
	 printf 'Stop time is in the past\n' >&2
	 exit 1
	fi

	printf 'Retrieving data objects to replicate...\n' >&2

	local maxCreateDate
	maxCreateDate=$(date --iso-8601 --date "$age days ago")

	local maxCreateTime
	maxCreateTime=$(date --date "$maxCreateDate" '+%s')

	local resCond
	if [[ -n "$srcRes" ]]
	then
		resCond="d.resc_name = '$srcRes'"
	else
		resCond="d.resc_name != '$destResc'"
	fi

	local baseCond
	if [[ -n "$baseColl" ]]
	then
		baseCond="c.coll_name = '$baseColl' OR c.coll_name LIKE '$baseColl/%'"
	else
		baseCond=TRUE
	fi

	local replQuery
	replQuery=$(mk_repl_query "$maxCreateTime" "$baseCond" "$resCond")

	psql \
			--no-align --tuples-only --record-separator-zero \
			--command "$replQuery" --field-separator ' ' \
			ICAT \
		> "$objList"

	local tot
	tot=$(count < "$objList")
	printf '%d data objects to replicate\n' "$tot" >&2

	if [[ "$tot" -gt 0 ]]
	then
		if [[ -z "$serial" ]]
		then
			local cnt=0

      # TODO prevent select_cohort's maxThreads from being larger than --max-threads
			# Small non-zero byte files
			cnt=$(select_cohort "$cnt" "$tot" "$destResc" "$procMult" 16 512 0  1 "$untilTS" < "$objList")  # 16 1-threaded transfers
			cnt=$(select_cohort "$cnt" "$tot" "$destResc" "$procMult"  8 128 1  2 "$untilTS" < "$objList")  # 8 2-threaded
			cnt=$(select_cohort "$cnt" "$tot" "$destResc" "$procMult"  6  72 2  3 "$untilTS" < "$objList")  # 6 3-threaded
			cnt=$(select_cohort "$cnt" "$tot" "$destResc" "$procMult"  4  32 3  5 "$untilTS" < "$objList")  # 4 4--5-threaded
			cnt=$(select_cohort "$cnt" "$tot" "$destResc" "$procMult"  3  18 5  7 "$untilTS" < "$objList")  # 3 6--7-threaded
			cnt=$(select_cohort "$cnt" "$tot" "$destResc" "$procMult"  2   8 7 15 "$untilTS" < "$objList")  # 2 8--15-threaded

			# Large file transfers
			cnt=$(select_cohort_by_size "$cnt" "$tot" "$destResc" "$procMult" "$maxThreads" "$untilTS" 480 < "$objList")  # >= 480 MiB transfers

			# zero byte files
			cnt=$(select_cohort "$cnt" "$tot" "$destResc" "$procMult" 16 512 0 0 "$untilTS" < "$objList")  # 16 1-threaded transfers
		else
			select_cohort 0 "$tot" "$destResc" "$procMult" 16 2 -1 -1 "$untilTS" < "$objList" > /dev/null
		fi
	fi
}


exit_with_help()
{
	show_help >&2
	exit 1
}


finish()
{
	local exitCode="$1"
	local objList="$2"

	rm --force "$objList"
	eval "exec 1>&$Log $Log>&-"

	if [[ "$exitCode" -eq "$TIMEDOUT" ]]
	then
		printf 'out of time\n' >&2
		exit 0
	fi

	exit "$exitCode"
}


count()
{
	awk 'BEGIN {
				 RS = "\0"
				 tot = 0
			 }

			 { tot = tot + 1 }

			 END { print tot }'
}


partition()
{
	local minSizeB="$1"

	local maxSizeB=
	if [[ "$#" -ge 2 ]]
	then
		maxSizeB="$2"
	fi

	if [[ -n "$maxSizeB" ]]
	then
		awk --assign min="$minSizeB" --assign max="$maxSizeB" \
				'BEGIN {
					 RS = "\0"
					 FS = " "
					 ORS = "\0"
				 }

				 {
					 if ($1 >= min && $1 < max) { print substr($0, length($1) + 2) }
				 }'
	else
		awk --assign min="$minSizeB" \
				'BEGIN {
					 RS = "\0"
					 FS = " "
					 ORS = "\0"
				 }

				 {
					 if ($1 >= min) { print substr($0, length($1) + 2) }
				 }'
	fi
}


mk_prog_msg()
{
	local count="$1"
	local total="$2"
	local subCount="$3"
	local subTotal="$4"

	printf 'cohort: %0*d/%d, all: %0*d/%d' \
				 ${#subTotal} "$subCount" "$subTotal" ${#total} "$count" "$total"
}


mk_repl_query()
{
	local maxTime="$1"
	local baseCond="$2"
	local resCond="$3"

	cat <<EOSQL
SELECT d.data_size, c.coll_name || '/' || d.data_name
FROM r_data_main AS d JOIN r_coll_main AS c ON c.coll_id = d.coll_id
WHERE d.data_id = ANY(ARRAY(SELECT data_id FROM r_data_main GROUP BY data_id HAVING COUNT(*) = 1))
	AND d.create_ts < '0$maxTime'
	AND ($baseCond)
	AND ($resCond)
EOSQL
}


track_prog()
{
	local cnt="$1"
	local tot="$2"
	local subTot="$3"

	local subCnt=0

	local msg
	msg=$(mk_prog_msg "$cnt" "$tot" "$subCnt" "$subTot")

	printf '%s' "$msg" >&2

	while read -r
	do
		if [[ "$REPLY" != 'cliReconnManager: '* ]]
		then
			((subCnt++))
			((cnt++))
			printf '\r%*s\r' ${#msg} '' >&2
			msg=$(mk_prog_msg "$cnt" "$tot" "$subCnt" "$subTot")
			printf '%s' "$msg" >&2
		fi
	done

	printf '\r%*s\r' ${#msg} '' >&2
	msg=$(mk_prog_msg "$cnt" "$tot" "$subCnt" "$subTot")
	printf '%s\n' "$msg" >&2
	printf '%s' "$cnt"
}


select_cohort()
{
	local cnt="$1"
	local tot="$2"
	local destResc="$3"
	local procMult="$4"
	local maxProcs="$5"
	local maxArgs="$6"
	local minThreads="$7"
	local maxThreads="$8"
	local untilTS="$9"

	if ! CHECK_TIME "$untilTS"
	then
		exit "$TIMEDOUT"
	fi

	local maxSizeB maxSizeMiB minSizeB minSizeMiB
	if [[ "$maxThreads" -eq -1 ]]
	then
		maxThreads=0
		minSizeMiB=0
		minSizeB=0
		maxSizeMiB=
		maxSizeB=
	elif [[ "$maxThreads" -eq 0 ]]
	then
		minSizeMiB=0
		minSizeB=0
		maxSizeMiB=0
		maxSizeB=1
	elif [[ "$minThreads" -eq 0 ]]
	then
		minSizeMiB=0
		minSizeB=1
		maxSizeMiB=$((maxThreads * 32))
		maxSizeB=$((maxSizeMiB * ((1024 ** 2))))
	else
		minSizeMiB=$((minThreads * 32))
		minSizeB=$((minSizeMiB * ((1024 ** 2))))
		maxSizeMiB=$((maxThreads * 32))
		maxSizeB=$((maxSizeMiB * ((1024 ** 2))))
	fi

	local cohortList
	cohortList=$(mktemp)

	if [[ -n "$maxSizeB" ]]
	then
		partition "$minSizeB" "$maxSizeB"
	else
		partition "$minSizeB"
	fi > "$cohortList"

	local subTotal
	subTotal=$(count <"$cohortList")

	if [[ "$minSizeMiB" -le 0 ]] && [[ -z "$maxSizeMiB" ]]
	then
		printf 'Replicating %s files\n' "$subTotal"
	elif [[ "$minSizeMiB" -le 0 ]] && [[ "$maxSizeMiB" -le 0 ]]
	then
		printf 'Replicating %s files with size 0 MiB\n' "$subTotal"
	elif [[ "$minSizeMiB" -le 0 ]]
	then
		printf 'Replicating %s files with size in (0, %s) MiB\n' "$subTotal" "$maxSizeMiB"
	else
		printf 'Replicating %s files with size in [%s, %s) MiB\n' \
					 "$subTotal" "$minSizeMiB" "$maxSizeMiB"
	fi >&2

	if [[ "$subTotal" -gt 0 ]]
	then
		maxProcs=$((maxProcs * procMult))

		parallel --no-notice --null --halt 2 --max-args "$maxArgs" --max-procs "$maxProcs" \
					REPL_BATCH "'$destResc'" "'$maxThreads'" "'$untilTS'" \
				< "$cohortList" \
				2>&"$Log" \
			| tee >(cat >&"$Log") \
			| track_prog "$cnt" "$tot" "$subTotal"
	else
		printf '%s\n' "$cnt"
	fi

	rm --force "$cohortList"
}


# This is intended for large files. irepl will be run on at most two files at a
# time.
select_cohort_by_size()
{
	local cnt="$1"
	local tot="$2"
	local destResc="$3"
	local procMult="$4"
	local maxThreads="$5"
	local untilTS="$6"
	local minSizeMiB="$7"

	local maxSizeMiB=
	if [[ "$#" -ge 8 ]]
	then
		maxSizeMiB="$8"
	fi

	local maxProcs=1

	if ! CHECK_TIME "$untilTS"
	then
		exit "$TIMEDOUT"
	fi

	local minSizeB=$((minSizeMiB * 1024 ** 2))
	local maxSizeB=$((maxSizeMiB * 1024 ** 2))

	local cohortList
	cohortList=$(mktemp)

	if [[ -n "$maxSizeMiB" ]]
	then
		local maxSizeB=$((maxSizeMiB * ((1024 ** 2))))
		partition "$minSizeB" "$maxSizeB"
	else
		partition "$minSizeB"
	fi > "$cohortList"

	local subTotal
	subTotal=$(count < "$cohortList")

	if [[ -n "$maxSizeMiB" ]]
	then
		printf 'Replicating %s files with size in [%s, %s) MiB\n' \
					 "$subTotal" "$minSizeMiB" "$maxSizeMiB" \
			>&2
	else
		printf 'Replicating %s files with size >= %s MiB\n' "$subTotal" "$minSizeMiB" >&2
	fi

	if [[ "$subTotal" -gt 0 ]]
	then
		maxProcs=$((maxProcs * procMult))

		parallel --no-notice --null --halt 2 --max-args 2 --max-procs "$maxProcs" \
					REPL_BATCH "'$destResc'" "'$maxThreads'" "'$untilTS'" \
				< "$cohortList" \
				2>&"$Log" \
			| tee >(cat >&"$Log") \
			| track_prog "$cnt" "$tot" "$subTotal"
	else
		printf '%s\n' "$cnt"
	fi

	rm --force "$cohortList"
}


REPL_BATCH()
{
	set -o errexit -o nounset -o pipefail

	local destResc="$1"
	local maxThreads="$2"
	local untilTS="$3"
	shift 3

	CHECK_TIME "$untilTS"

	local replStatus=0
	irepl -B -M -T -v -N "$maxThreads" -R "$destResc" "$@" || replStatus="$?"

	# TODO: Trying to figure out the irepl error code for when irepl logs a
	# '_rcConnect: connectToRhost error, server on data.cyverse.org:1247 is
	# probably down status = -305113 USER_SOCK_CONNECT_ERR, No route to host'
	# error message. It is probably at 113, but we should confirm. Once this is
	# confirmed, if this status is returned, this function	should wait for a bit
	# and try again.
	if [[ "$replStatus" -ne 0 ]]
	then
		printf 'repl: irepl exited with status %d\n' "$replStatus" >&2
	fi

	exit 0
}
export -f REPL_BATCH


CHECK_TIME()
{
	local untilTS="$1"

	if [[ -n "$untilTS" ]] && [[ "$(date '+%s')" -ge "$untilTS" ]]
	then
		return "$TIMEDOUT"
	fi
}
export -f CHECK_TIME


main "$@"
