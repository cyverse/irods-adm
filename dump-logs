#!/bin/bash
#
# Usage: dump-logs [YEAR [MONTH [DAY]]]
#
# YEAR is a the four digit year to restrict the dump to. MONTH is the number of
# the month to restrict the dump to. January is 1, February is 2, etc. DAY is
# the number of the day of the month to restrict the dump to. 1 is the first of
# the month, 2 is the second, etc.
#
# This script dumps all of the logs from the rodsLog files on the IES and all of
# the resource servers. It groups the log by session, and it dumps each session
# that logs an error message. See group-log-by-pid for the details on how a
# session is logged.
#
# The session logs are written into the directory $CWD/logs. The logs are
# written into one file for each server. The file has the name
# <server>.sessions.
#
# By default, it will process all of the logs. By specifying a year, year and
# month number, or year, month number, and day number, only the logs for that
# year, month, or day will be processed. It will restrict its search by the date
# forming the log file name not the message times from inside the logs. This
# means that messages with times that don't match the log name won't be
# considered.
#
# The script shows its progress in the following form:
#
#     dumping logs from <server>
#       dumping /var/log/irods/iRODS/server/log/rodsLog.<year>.<month>.<start_day>
#         <total session count>


readonly ExecPath=$(readlink --canonicalize "$0")
readonly ExecDir=$(dirname "$ExecPath")
readonly LogDir=/var/lib/irods/iRODS/server/log
readonly LogBase=rodsLog

declare year=\*
declare month=\*
declare startDay=\*

if [ $# -ge 1 ]; then printf -v year '%04d' $((10#$1)); fi
if [ $# -ge 2 ]; then printf -v month '%02d' $((10#$2)); fi

if [ $# -ge 3 ]
then
  printf -v day '%02d' $((10#$3))
  startDay=$(( 1 + (5 * ((10#$day - 1) / 5)) ))
  printf -v startDay '%02d' "$startDay"
fi

readonly LogExt="$year"."$month"."$startDay"


filter_day()
{
  if [ -z "$day" ]
  then
    cat
  else
    local date="$year"-"$month"-"$day"

    "$ExecDir"/filter-sessions-by-time \
      --assign ERA_BEGIN="$date 00:00:00" --assign ERA_END="$date 23:59:59"
  fi
}


count_sessions()
{
  local cnt=0
  printf '  %d\r' "$cnt" >&2

  while IFS= read -r -dยง
  do
    local session="${REPLY:1}"

    if [[ -n "$session" ]]
    then
      printf 'ยง%s' "$session"
      (( cnt++ ))
      printf '  %d\r' "$cnt" >&2
    fi
  done

  printf '%d sessions\n' "$cnt" >&2
}


get_servers()
{
  iquest \
    '%s' \
    "select order(RESC_LOC) where RESC_NAME != 'bundleResc' and RESC_LOC != 'EMPTY_RESC_HOST'"
}


dump_log()
{
  local svr="$1"
  local logExt="$2"

  "$ExecDir"/gather-logs --extension-pattern "$logExt" "$svr" \
    | "$ExecDir"/group-log-by-pid \
    | filter_day \
    | count_sessions \
    | "$ExecDir"/order-sessions
}


declare -i cnt

mkdir --parents logs

readonly Ies=$(ienv | sed --quiet 's/NOTICE: irods_host - //p')
readonly RS=$(get_servers)

for svr in "$Ies" $RS
do
  printf '\rdumping logs from %s\n' "$svr" >&2
  out=logs/"$svr".sessions

  for log in $("$ExecDir"/list-rods-logs --name-pattern "$LogBase"."$LogExt" "$svr")
  do
    logName=$(basename "$log")

    dump_log "$svr" "${logName#*.}" >> "$out"
  done
done
