#!/bin/bash
#
# Usage: dump-logs [YEAR [MONTH [DAY[,DAY]]]]
#
# YEAR is a the four digit year to restrict the dump to. MONTH is the number of
# the month to restrict the dump to. January is 1, February is 2, etc. DAY is
# the number of the day of the month to restrict the dump to. 1 is the first of
# the month, 2 is the second, etc. DAY1,DAY2 is an inclusive range of days from
# DAY1 through DAY2. They both must be in the same month.
#
# This script dumps all of the logs from the rodsLog files on the IES and all of
# the resource servers. It groups the log by session, and it dumps each session
# that logs an error message. See group-log-by-pid for the details on how a
# session is logged.
#
# The session logs are written into the directory $CWD/logs. The logs are
# written into one file for each server. The file has the name
# <server>.sessions.
#
# By default, it will process all of the logs. By specifying a year, year and
# month number, or year, month number, and day number, only the logs for that
# year, month, or day will be processed. It will restrict its search by the date
# forming the log file name not the message times from inside the logs. This
# means that messages with times that don't match the log name won't be
# considered.
#
# The script shows its progress in the following form:
#
#     dumping logs from <server>
#       dumping /var/log/irods/iRODS/server/log/rodsLog.<year>.<month>.<start_day>
#         <total session count>
#
# © 2021, The Arizona Board of Regents on behalf of The University of Arizona.
# For license information, see https://cyverse.org/license.

set -o nounset -o pipefail

readonly ExecPath=$(readlink --canonicalize "$0")
readonly ExecDir=$(dirname "$ExecPath")
readonly LogDir=/var/lib/irods/iRODS/server/log
readonly LogBase=rodsLog


fmt_number()
{
  local len="$1"
  local number="$2"

  printf '%0*d' "$len" $((10#$number))
}


log_day()
{
  local day="$1"

  fmt_number 2 $(( 1 + (5 * ((10#$day - 1) / 5)) ))
}


filter_day()
{
  if [ -z "$dayRangeBegin" ]
  then
    cat
  else
    local startTime="$year-$month-$dayRangeBegin 00:00:00"
    local endTime="$year-$month-$dayRangeEnd 23:59:59"

    "$ExecDir"/filter-sessions-by-time "$startTime" "$endTime"
  fi
}


count_sessions()
{
  local cnt=0
  printf '  %d\r' "$cnt" >&2

  while IFS= read -r -d§
  do
    local session="${REPLY:1}"

    if [[ -n "$session" ]]
    then
      printf '§%s' "$session"
      (( cnt++ ))
      printf '  %d\r' "$cnt" >&2
    fi
  done

  printf '%d sessions\n' "$cnt" >&2
}


get_servers()
{
  iquest \
    '%s' \
    "select order(RESC_LOC) where RESC_NAME != 'bundleResc' and RESC_LOC != 'EMPTY_RESC_HOST'"
}


dump_log()
{
  local svr="$1"
  local logExt="$2"

  "$ExecDir"/gather-logs --extension-pattern "$logExt" "$svr" \
    | "$ExecDir"/group-log-by-pid \
    | filter_day \
    | count_sessions \
    | "$ExecDir"/order-sessions
}


if [ $# -ge 1 ]
then
  yearInput="$1"
  year=$(fmt_number 4 "$yearInput")
else
  year=\*
fi

if [ $# -ge 2 ]
then
  monthInput="$2"
  month=$(fmt_number 2 "$monthInput")
else
  month=\*
fi

if [ $# -ge 3 ]
then
  dayInput="$3"

  dayRangeBegin=$(fmt_number 2 "${dayInput%,*}")
  dayRangeEnd=$(fmt_number 2 "${dayInput#*,}")

  logStartDay=$(log_day "$dayRangeBegin")
  logEndDay=$(log_day "$dayRangeEnd")
else
  dayRangeBegin=
  dayRangeEnd=
  logStartDay=
  logEndDay=
fi

readonly LogExt="$year"."$month"

declare -i cnt

mkdir --parents logs

readonly Ies=$(ienv | sed --quiet 's/NOTICE: irods_host - //p')
readonly RS=$(get_servers)

for svr in "$Ies" $RS
do
  printf '\rdumping logs from %s\n' "$svr" >&2
  out=logs/"$svr".sessions

  for log in $("$ExecDir"/list-rods-logs --name-pattern "$LogBase.$LogExt.*" "$svr")
  do
    logName=$(basename "$log")

    if [[ -n "$logStartDay" ]]
    then
      logDay="${logName##*.}"

      if [[ "$logDay" -lt "$logStartDay" ]] || [[ "$logDay" -gt "$logEndDay" ]]
      then
        continue
      fi
    fi

    dump_log "$svr" "${logName#*.}" >> "$out"
  done
done
