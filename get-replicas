#!/bin/bash

show_help()
{
  cat << EOF
$EXEC_NAME version $VERSION

Usage:
 $EXEC_NAME [options] <data object>

retrieves information about the replicas of a data object

Parameters:
 <data object>  the path to the data object

Options:
 -h, --help     show help and exit
 -v, --version  show version and exit

Summary:
For each replica of the data object, it returns the resource hierarchy path to
the storage resource holding the file, the host name of the resource server
serving the storage resource, and the path to the file. For each replica, it
writes this information to standard out with the following format with one line
per replica.

<resource hierarchy> <resource server> <file>

Prerequisites:
 1) The data object may not have a carriage return in its path.
 2) The user must be initialized with iRODS as an admin user.
EOF
}


set -e

readonly EXEC_NAME=$(basename "$0")
readonly VERSION=1


show_version()
{
  printf '%s\n' "$VERSION"
}


show_help_and_error_out()
{
  show_help >&2
  exit 1
}


if ! opts=$(getopt --name "$EXEC_NAME" --options hv --longoptions help,version -- "$@")
then
  printf '\n' >&2
  show_help_and_error_out
fi

eval set -- "$opts"

while true
do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    -v|--version)
      show_version
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      show_help_and_error_out
      ;;
  esac
done


if [ "$#" -lt 1 ]
then
  show_help_and_error_out
fi


readonly OBJ_PATH="$*"


ask_irods()
{
  local collPath
  collPath=$(dirname "$OBJ_PATH")

  local objName
  objName=$(basename "$OBJ_PATH")

  local resp
  resp=$(iquest --no-page \
                '%s %s %s' \
                "select DATA_ID, DATA_RESC_HIER, DATA_PATH
                 where COLL_NAME = '$collPath' and DATA_NAME = '$objName'")
  local ec="$?"
  if [ "$ec" -ne 0 ] || [ "$resp" = 'CAT_NO_ROWS_FOUND: Nothing was found matching your query' ]
  then
    printf 'invalid data object: %s\n' "$OBJ_PATH" >&2
  else
    cut --delimiter ' ' --fields 2- <<< "$resp"
  fi
}


while read -r rescHier filePath
do
  storeResc="${rescHier##*;}"

  if ! storeHost=$(iquest '%s' "SELECT RESC_LOC WHERE RESC_NAME = '$storeResc'")
  then
    printf 'Failed to retrieve location for resource %s\n' "$storeResc" >&2
  else
    printf '%s %s %s\n' "$rescHier" "$storeHost" "$filePath"
  fi
done < <(ask_irods)
