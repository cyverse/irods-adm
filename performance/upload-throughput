#!/bin/bash

show_help()
{
  cat <<EOF

$ExecName version $Version

Usage:
 $ExecName [options]

This script measures upload throughput from the client running this script to
the CyVerse Data Store. It uploads a 10 GiB file thirty times in a row, with
each upload being to a new data object. A report is written to stdout, while
errors and status messages are written to stderr.

Options:
 -D, --dest-coll DEST-COLL  the name of the temporary collection where the test
                            file will be repeatedly uploaded. Defaults to
                            \`ipwd\`/upload-throughput-\`date -u -Iseconds\`.
 -L, --log REPORT-FILE      write report to REPORT-FILE instead of stdout.
 -S, --src-dir SRC-DIR      the directory where the 10 GiB temporary test file
                            will be generated. Defaults to the system default
                            temporary directory.

 -h, --help     show help and exit
 -v, --verbose  output status messages
 -V, --version  show version and exit

Output:
It generates a report similar to the following.
$(tput bold)
UPLOAD THROUGHPUT REPORT

Execution Time:         2019-12-02T22:47:13+00:00
Estimated Throuphput:   85.121 MiB/s
67% Confidence Bounds:  [84.427, 85.819] MiB/s

Bounds on Measurements: [82.116, 85.775] MiB/s


Client Information

iCommands:  rods4.1.10
Memory:     16172752 kB
Cores:      8


Runs

Run   Start Time (UTC)      Duration (s)   Throughput (MiB/s)
 01   2019-12-02T22:47:14        120.022           85.316
 02   2019-12-02T22:49:15        119.380           85.775
.
.
.
 30   2019-12-02T23:46:29        119.912           85.394  $(tput sgr0)
EOF
}


set -o nounset -o pipefail

readonly ExecAbsPath=$(readlink --canonicalize "$0")
readonly ExecName=$(basename "$ExecAbsPath")
readonly Version=2

readonly NumRuns=30
readonly Size=10GiB

StatusLog=/dev/null
ReportLog=/dev/stdout


main()
{
  local opts
  if ! opts=$(fmt_opts "$@")
  then
    show_help >&2
    return 1
  fi

  eval set -- "$opts"

  local destColl=
  local srcDir="${TMPDIR:-}"
  local versionReq=
  while true
  do
    case "$1" in
      -h|--help)
        show_help
        return 0
        ;;
      -V|--version)
        versionReq=1
        shift
        ;;
      -v|--verbose)
        StatusLog=/dev/stderr
        shift
        ;;
      -D|--dest-coll)
        destColl="$2"
        shift 2
        ;;
      -L|--log)
        ReportLog="$2"
        shift 2
        ;;
      -S|--src-dir)
        srcDir="$2"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        show_help >&2
        return 1
        ;;
    esac
  done

  if [[ -n "$versionReq" ]]
  then
    printf '%s\n' "$Version"
  else
    local curTime="$(date --utc --iso-8601=seconds)"
    do_test "$curTime" "$srcDir" "$destColl" | gen_report "$curTime" > "$ReportLog"
  fi
}


fmt_opts()
{
  getopt \
    --name "$ExecName" \
    --longoptions help,verbose.version,dest-coll:,log:,src-dir: \
    --options hVvD:L:S: \
    -- \
    "$@"
}


do_test()
{
  local curTime="$1"
  local srcDir="$2"
  local destColl="$3"

  if ! ensure_irods_sess
  then
    printf 'iRODS session not initialized\n' >&2
    return 1
  fi

  if [[ -z "$destColl" ]]
  then
    destColl="$(ipwd)/upload-throughput-$curTime"
  fi

  local srcFile
  if ! srcFile=$(TMPDIR="$srcDir" mktemp)
  then
    printf 'Cannot reserve temporary file\n' >&2
    return 1
  fi

  # shellcheck disable=SC2064
  trap "clean_up '$srcFile' '$destColl'" EXIT

  printf 'Creating 10 GiB test file %s\n' "$srcFile" >> "$StatusLog"
  if ! truncate --size "$Size" "$srcFile"
  then
    printf 'Failed to create file\n' >&2
    return 1
  fi

  printf 'Creating destination collection %s\n' "$destColl" >> "$StatusLog"
  if ! imkdir "$destColl"
  then
    printf 'Failed to create destination collection\n' >&2
    return 1
  fi

  printf 'Beginning test\n' >> "$StatusLog"

  local attempt
  for attempt in $(seq "$NumRuns")
  do
    printf 'Uploading %s\n' "$attempt" >> "$StatusLog"

    local obj
    printf -v obj '%s/upload-%02d' "$destColl" "$attempt"
    perform_upload "$attempt" "$srcFile" "$obj" | tee --append "$StatusLog"
  done

  printf 'Finished test\n' >> "$StatusLog"
}


perform_upload()
{
  local run="$1"
  local src="$2"
  local dest="$3"

  local startTime duration rate
  startTime=$(date --utc --iso-8601=seconds)
  IFS=' |' read -r _ _ _ duration _ _ _ rate _ < <(iput -v "$src" "$dest")
  printf '%02d   %s   %s s   %s MiB/s\n' "$run" "$startTime" "$duration" "$rate"
}


clean_up()
{
  local testFile="$1"
  local destColl="$2"

  if ils "$destColl" &> /dev/null
  then
    printf 'Deleting destination collection %s\n' "$destColl" >> "$StatusLog"
    irm -f -r "$destColl"
  fi

  printf 'Deleting test file %s\n' "$testFile" >> "$StatusLog"
  rm --force "$testFile"

  printf 'Finished\n' >> "$StatusLog"
  return 0
}

ensure_irods_sess()
{
  local authFile
  authFile="$(ienv | sed --quiet 's/.*irods_authentication_file - //p')"

  if [[ -z "$authFile" ]] || [[ ! -e "$authFile" ]]
  then
    if ! iinit
    then
      iexit full
      return 1
    fi
  fi
}


gen_report()
{
  local reportTime="$1"

  local rates=()

  local runsReport
  printf -v runsReport 'Runs\n\n'

  printf -v runsReport \
    '%sRun   Start Time (UTC)      Duration (s)   Throughput (MiB/s)\n' "$runsReport"

  local duration rate run startTime
  while IFS=' ' read -r run startTime duration _ rate _
  do
    rates=(${rates[*]} $rate)
    startTime="${startTime%+*}"

    printf -v runsReport \
      '%s %02d   %s   %12s   %14s\n' "$runsReport" "$run" "$startTime" "$duration" "$rate"
  done

  local maxRate minRate
  maxRate=$(compute_max "${rates[@]}")
  minRate=$(compute_min "${rates[@]}")

  local geoMeanRate geoStd
  geoMeanRate=$(compute_geomean "${rates[@]}")
  geoStd=$(compute_geostd "$geoMeanRate" "${rates[@]}")

  local expectedRate likelyLB likelyUB
  expectedRate=$(dc --expression "3 k $geoMeanRate 1 / p")
  likelyLB=$(dc --expression "3 k $geoMeanRate $geoStd / p")
  likelyUB=$(dc --expression "3 k $geoMeanRate $geoStd * 1 / p")

  local irodsVer numCores totMem
  numCores=$(grep --count --regexp '^processor' /proc/cpuinfo)
  totMem=$(awk '/MemTotal:/ { printf "%s %s", $2, $3 }' /proc/meminfo)
  irodsVer=$(ienv | sed --quiet 's/.*Release Version = \([^,]*\),.*/\1/p')

  local report
  printf -v report 'UPLOAD THROUGHPUT REPORT\n\n'

  printf -v report '%sExecution Time:         %s\n' "$report" "$reportTime"
  printf -v report '%sEstimated Throuphput:   %s MiB/s\n' "$report" "${expectedRate/#./0.}"
  printf -v report \
    '%s67%% Confidence Bounds:  [%s, %s] MiB/s\n' "$report" "${likelyLB/#./0.}" "${likelyUB/#./0.}"

  printf -v report '%s\nBounds on Measurements: [%s, %s] MiB/s\n' "$report" "$minRate" "$maxRate"

  printf -v report '%s\n\nClient Information\n\n' "$report"
  printf -v report '%siCommands:  %s\n' "$report" "$irodsVer"
  printf -v report '%sMemory:     %s\n' "$report" "$totMem"
  printf -v report '%sCores:      %d\n' "$report" "$numCores"

  printf '%s\n\n%s' "$report" "$runsReport"
}


compute_geomean()
{
  awk --file - <(printf '%s\n' "$@") <<'EOF'
    BEGIN { totLn = 0.0; }
    { totLn += log($0); }
    END { print exp(totLn / NR); }
EOF
}


compute_geostd()
{
  local geoMean="$1"
  shift

  awk --assign GEOMEAN="$geoMean" --file - <(printf '%s\n' "$@") <<'EOF'
    BEGIN { totSqrLnScaled = 0.0; }
    GEOMEAN == 0 { totSqrLnScaled = +inf }
    GEOMEAN != 0 { totSqrLnScaled += log($0 / GEOMEAN)^2 }
    END { print exp(sqrt(totSqrLnScaled / NR)); }
EOF
}

compute_max()
{
  awk --file - <(printf '%s\n' "$@") <<'EOF'
    NR == 1 { max = $0; }
    { if ($0 > max) { max = $0; } }
    END { print max; }
EOF
}

compute_min()
{
  awk --file - <(printf '%s\n' "$@") <<'EOF'
    NR == 1 { min = $0; }
    { if ($0 < min) { min = $0; } }
    END { print min; }
EOF
}


main "$@"
