#!/bin/bash

show_help() {
	cat <<EOF

$ExecName version $Version

Usage:
 $ExecName [options] CLASS-BASE

checks data object replicas for correct sizes and checksums

Parameters:
 CLASS-BASE  the common basename of the files that hold the data objects with
             incorrect checksums or sizes

Options:
 -h, --help           display help text and exit
 -J, --jobs N         perform N checks simultaneously, default is the number of
                      CPUs
 -R, --resource RESC  only check replicas on resource RESC
 -v, --version        display version and exit

Summary:
The script reads a list of iRODS data object paths from standard in, one per
line, and checks to see if any of the replicas have an incorrect checksum or
size. The ones with incorrect sizes are appended to the file
\`CLASS-BASE.bad_size\`. The ones with incorrect checksums are appended to the
file \`CLASS-BASE.bad_chksum\`. If an error occurs while checking a replica, the
error is written to \`CLASS-BASE\`.errors. In any case, at most one log entry
will be logged per line.

\`CLASS-BASE.bad_chksum\` and \`CLASS-BASE.bad_size\` file entries have the form
'<rescource hierarchy> <data object path>'.

Â© 2021, The Arizona Board of Regents on behalf of The University of Arizona. For
license information, see https://cyverse.org/license.
EOF
}


readonly Version=4

set -o errexit -o nounset -o pipefail

readonly ExecName=$(basename "$0")


# formats the command line arguments for getopt style
# parsing
# Arguments:
#   The raw command line arguments
# Output:
#   The formatted arguments
format_opts() {
	getopt --name "$ExecName" --options hJ:R:v --longoptions help,jobs:,resource:,version -- "$@"
}


show_version() {
	printf '%s\n' "$Version"
}


exit_with_help() {
	show_help >&2
	exit 1
}


if ! opts="$(format_opts "$@")"
then
	printf '\n' >&2
	exit_with_help
fi

eval set -- "$opts"

while true
do
	case "$1" in
		-h|--help)
			show_help
			exit 0
			;;
		-J|--jobs)
			readonly Jobs="$2"
			shift 2
			;;
		-R|--resource)
			readonly Resc="$2"
			shift 2
			;;
		-v|--version)
			show_version
			exit 0
			;;
		--)
			shift
			break
			;;
		*)
			exit_with_help
			;;
	esac
done

if [ "$#" -lt 1 ]
then
	exit_with_help
fi

readonly ClassBase="$1"

export ERR_LOG="$ClassBase".errors


# For a given data object, this fuction retrieves the size, checksum, resource,
# and file path for each of its replicas.
# Arguments:
#  dataObj   the absolute path the the data object
#  rescName  if not empty, restricts the replicas to belonging to this root
#            resource
# Output:
#  To stdout, it writes one line per replica. Each line as the form
#  `<size> <checksum> <resource hierarchy> <file path>`.
GET_CAT_INFO() {
	local dataObj="$1"
	local rescName="${2-}"

	local collName dataName
	collName="$(dirname "$dataObj")"
	dataName="$(basename "$dataObj")"

	local query="
		select DATA_SIZE, DATA_CHECKSUM, DATA_RESC_HIER, DATA_PATH
		where COLL_NAME = '$collName' and DATA_NAME = '$dataName'"

	if [[ -n "$rescName" ]]
	then
		query+=" and DATA_RESC_NAME = '$rescName'"
	fi

	iquest '%s %s %s %s' "$query" | sed '/CAT_NO_ROWS_FOUND/d'
}
export -f GET_CAT_INFO


# For a given file on a given host, this function retrieves the file's size and
# checksum.
# Arguments:
#  storeHost  The FQDN or IP address of the host
#  filePath   The absolute path to the file on storeHost
# Output:
#  To stdout, it writes one line with the form `<size> <checksum>`.
GET_STORE_INFO() {
	local storeHost="$1"
	local filePath="$2"

	#shellcheck disable=SC2087
	ssh -q -t "$storeHost" <<EOSSH
if ! size="\$(stat --format '%s' '$filePath' 2> /dev/null)" \\
	|| ! chksum="\$(md5sum '$filePath' 2> /dev/null)"
then
	exit 1
fi

printf '%s %s\n' "\$size" "\${chksum%% *}"
EOSSH
}
export -f GET_STORE_INFO


CHECK_OBJ() {
	local resc="$1"
	local objPath="$2"

	local catInfo
	readarray -t catInfo < <(GET_CAT_INFO "$objPath" "$resc")

	for replInfo in "${catInfo[@]}"
	do
		local replSize replChksum rescHier filePath
		read -r replSize replChksum rescHier filePath <<< "$replInfo"

		local storeHost
		storeHost="$(iquest '%s' "select RESC_LOC where RESC_NAME = '${rescHier##*;}'")"

		local fileSize fileChksum
		read -r fileSize fileChksum < <(GET_STORE_INFO "$storeHost" "$filePath")

		local reason
		if [[ "$replSize" != "$fileSize" ]]
		then
			reason=size
		elif [[ "$replChksum" != "$fileChksum" ]]
		then
			reason=checksum
		fi

		printf '%s %s %s\n' "$reason" "$rescHier" "$objPath"
	done
}
export -f CHECK_OBJ


log() {
	while read -r reason entry
	do
		if [ "$reason" = size ]
		then
			printf '%s\n' "$entry" >> "$ClassBase".bad_size
		elif [ "$reason" = checksum ]
		then
			printf '%s\n' "$entry" >> "$ClassBase".bad_chksum
		else
			printf '%s %s\n' "$reason" "$entry" >> "$ERR_LOG"
		fi
	done
}


if [ -n "$Jobs" ]
then
	readonly JobsOpt="-j$Jobs"
fi

parallel --eta --no-notice --delimiter '\n' --max-args 1 "$JobsOpt" CHECK_OBJ "${Resc-}" | log
