#!/bin/bash

show_help() {
	cat <<EOF

$ExecName - version $Version

Usage:
 $ExecName [options] <class_base>

checks data object replicas for correct sizes and checksums

Parameters:
 <class_base>  the common basename of the files that hold the data objects with
               incorrect checksums or sizes

Options:
 -j, --jobs <n>         perform <n> checks simultaneously, default is the number
                        of CPUs
 -R, --resource <resc>  only check replicas on resource <resc>

 -h, --help     display help text and exit
 -v, --version  display version and exit

Summary:
The script reads a list of iRODS data object paths from standard in, one per
line, and checks to see if any of the replicas have an incorrect checksum or
size. The ones with incorrect sizes are appended to the file
<class_base>.bad_size. The ones with incorrect checksums are appended to the
file <class_base>.bad_chksum. In either case, only one log entry will be logged
per line. If an error occurs while checking a replica, the error is written to
<class_base>.errors.

Non error log entries have the following form.

<rescource hierarchy> <data object path>
EOF
}


readonly ExecName=$(basename "$0")
readonly Version=3


# formats the command line arguments for getopt style
# parsing
# Arguments:
#   The raw command line arguments
# Output:
#   The formatted arguments
format_opts() {
	getopt --name "$ExecName" --options hj:R:v --longoptions help,jobs:,resource:,version -- "$@"
}


show_version() {
	printf '%s\n' "$Version"
}


exit_with_help() {
	show_help >&2
	exit 1
}


set -e

if ! opts="$(format_opts "$@")"
then
	printf '\n' >&2
	exit_with_help
fi

eval set -- "$opts"

while true
do
	case "$1" in
		-h|--help)
			show_help
			exit 0
			;;
		-j|--jobs)
			readonly Jobs="$2"
			shift 2
			;;
		-R|--resource)
			readonly Resc="$2"
			shift 2
			;;
		-v|--version)
			show_version
			exit 0
			;;
		--)
			shift
			break
			;;
		*)
			exit_with_help
			;;
	esac
done

if [ "$#" -lt 1 ]
then
	exit_with_help
fi

readonly ClassBase="$1"

readonly ExecPath=$(readlink --canonicalize "$0")
export EXEC_DIR
EXEC_DIR=$(dirname "$ExecPath")

export ERR_LOG="$ClassBase".errors


# executed a command on a resource server as the irods user
# Arguments:
#   rs   the name of the resource server
#   cmd  the command to execute
# Output:
#   the output of the command
EXEC_ON_RS() {
	local rs="$1"
	local cmd="$2"

	#shellcheck disable=SC2087
	ssh -q -t "$rs" <<EOSSH
if [[ "\$USER" = irods ]]
then
	$cmd
else
	sudo -i -u irods <<'EOSUDO'
$cmd
EOSUDO
fi
EOSSH
}
export -f EXEC_ON_RS


CHECK_OBJ() {
	local resc="$1"
	local objPath="$2"

	while read -r rescHier storeHost filePath
	do
		if [[ "$rescHier" =~ ^${resc}(;.*)?$ ]]
		then
			local resp
			resp="$(EXEC_ON_RS "$storeHost" "ifsck -K '$filePath'" 2>> "$ERR_LOG")"

			local reason
			if [[ "$resp" =~ size\.$ ]]
			then
				reason=size
			elif [[ "$resp" =~ checksum\.$ ]]
			then
				reason=checksum
			fi

			if [[ -n "$reason" ]]
			then
				printf '%s %s %s\n' "$reason" "$rescHier" "$objPath"
			fi
		fi
	done < <(cd "$EXEC_DIR" && ./get-replicas "$objPath")
}
export -f CHECK_OBJ


log() {
	while read -r reason rescHier objPath
	do
		printf -v entry '%s %s\n' "$rescHier" "$objPath"

		if [ "$reason" = size ]
		then
			printf '%s' "$entry" >> "$ClassBase".bad_size
		elif [ "$reason" = checksum ]
		then
			printf '%s' "$entry" >> "$ClassBase".bad_chksum
		fi
	done
}


if [ -n "$Jobs" ]
then
	readonly JobsOpt="-j$Jobs"
fi

parallel --eta --no-notice --delimiter '\n' --max-args 1 "$JobsOpt" CHECK_OBJ "${Resc-}" | log
