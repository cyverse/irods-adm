#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Â© 2025, The Arizona Board of Regents on behalf of The University of Arizona.
# For license information, see https://cyverse.org/license.

'''Report most recent ICAT DB user activity'''

import argparse
import os
import sys

import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_REPEATABLE_READ
from psycopg2.extras import DictCursor


_HELP_MSG = '''
Report most recent ICAT DB user activity.

This script determines the set of inactive users. An inactive user is one that has at no change
related to the user made to the ICAT DB in the last year.

The strategy used is as follows:
1. For each of the categories, user info, passwords, group memberships, collections, data objects,
   AVUs, user object permissions, user permissions on objects, user created tickets, and tickets
   granting users access, find the most recent change for each user.
2. Combine all these categories, and find the most recent single change for each user.

Environment Variables:
  PGHOST  provides the default value for the DBMS host, default is "localhost"
  PGPORT  provides the default value for the TCP port the DBMS listens on, default is 5432
  PGUSER  provides the default value for the account used to authorize the connection, default is
          the user executing this program.
'''


_TEMP_TBL_CREATES = [
    # Users table
    '''
    CREATE TEMPORARY TABLE users(id, name, modify_time) AS
    SELECT
        u.user_id,
        CASE
            WHEN z.zone_type_name = 'local' THEN u.user_name
            ELSE u.user_name || '#' || u.zone_name
        END,
        u.modify_ts::BIGINT
    FROM r_user_main AS u JOIN r_zone_main AS z ON z.zone_name = u.zone_name
    WHERE u.user_type_name = 'rodsuser';
    ''',
    'CREATE INDEX users_id_idx ON users(id)',
    'CREATE INDEX users_name_idx ON users(name)',

    # User name collections table
    '''
    CREATE TEMPORARY TABLE user_name_collections(user_name, coll_id, modify_time) AS
    SELECT
        SUBSTRING(
            coll_name FROM '/'
                || (SELECT zone_name FROM r_zone_main WHERE zone_type_name = 'local')
                || '(?:/trash)?/home/([^/]*)'),
        coll_id,
        modify_ts::BIGINT
    FROM r_coll_main
    ''',
    'CREATE INDEX user_name_collections_idx ON user_name_collections(user_name)',

    # User collections table
    '''
    CREATE TEMPORARY TABLE user_collections(user_id, coll_id, modify_time) ON COMMIT DROP AS
    SELECT u.id, c.coll_id, c.modify_time
    FROM users AS u JOIN user_name_collections AS c ON c.user_name = u.name
    ''',
    'CREATE INDEX user_collections_user_id_idx ON user_collections(user_id)',
    'CREATE INDEX user_collections_coll_id_idx ON user_collections(coll_id)',

    # User data table
    '''
    CREATE TEMPORARY TABLE user_data(user_id, data_id, modify_time) ON COMMIT DROP AS
    SELECT c.user_id, d.data_id, MAX(d.modify_ts) :: BIGINT
    FROM user_collections AS c JOIN r_data_main AS d ON d.coll_id = c.coll_id
    WHERE d.coll_id = c.coll_id
    GROUP BY c.user_id, d.data_id
    ''',
    'CREATE INDEX user_data_user_id_idx ON user_data(user_id)',

    # User objects table
    '''
    CREATE TEMPORARY TABLE user_objects(user_id, object_id) ON COMMIT DROP AS
    SELECT user_id, coll_id FROM user_collections UNION SELECT user_id, data_id FROM user_data
    ''',
    'CREATE INDEX user_objects_idx ON user_objects(user_id, object_id)',

    # User modifications table
    '''
    CREATE TEMPORARY TABLE user_mods(id, last_modification_time) ON COMMIT DROP AS
    SELECT id, MAX(modify_time)
    FROM (
            -- set of user info changes
            SELECT id, modify_time from users

            -- set of password changes
            UNION SELECT u.id, MAX(p.modify_ts) :: BIGINT
            FROM users AS u JOIN r_user_password AS p ON p.user_id = u.id
            GROUP BY u.id

            -- set of group membership changes
            UNION SELECT u.id, MAX(g.modify_ts) :: BIGINT
            FROM users AS u JOIN r_user_group AS g ON g.user_id = u.id
            GROUP BY u.id

            -- set of collection changes
            UNION SELECT user_id, MAX(modify_time) FROM user_collections GROUP BY user_id

            -- set of data object changes
            UNION SELECT user_id, MAX(modify_time) FROM user_data GROUP BY user_id

            -- set of AVU changes
            UNION SELECT uo.user_id, GREATEST(MAX(om.modify_ts), MAX(mm.modify_ts)) :: BIGINT
            FROM user_objects AS uo
                JOIN r_objt_metamap AS om ON om.object_id = uo.object_id
                JOIN r_meta_main AS mm ON mm.meta_id = om.meta_id
            WHERE mm.meta_attr_name NOT LIKE 'ipc%'
            GROUP BY uo.user_id

            -- set changes to user object permissions
            UNION SELECT uo.user_id, MAX(oa.modify_ts) :: BIGINT
            FROM user_objects AS uo JOIN r_objt_access AS oa ON oa.object_id = uo.object_id
            GROUP BY uo.user_id

            -- set of changes to user permissions on objects
            UNION SELECT u.id, MAX(oa.modify_ts) :: BIGINT
            FROM users AS u JOIN r_objt_access AS oa ON oa.user_id = u.id
            GROUP BY u.id

            -- set of user granted ticket changes
            UNION SELECT u.id, MAX(t.modify_ts) :: BIGINT
            FROM users AS u JOIN r_ticket_main AS t ON t.user_id = u.id
            GROUP BY u.id

            -- set of changes to tickets granted to users
            UNION SELECT u.id, MAX(tm.modify_ts) :: BIGINT
            FROM users AS u
                JOIN r_ticket_allowed_users AS tau ON tau.user_name = u.name
                JOIN r_ticket_main AS tm ON tm.ticket_id = tau.ticket_id
            GROUP BY u.id
        ) AS t
    GROUP BY id
    ''',
    'CREATE INDEX user_mods_idx ON user_mods(id, last_modification_time)',
]

# Final query to get user activity report
_REPORT_QUERY = '''
SELECT u.name AS name, TO_CHAR(TO_TIMESTAMP(um.last_modification_time), 'YYYY-MM-DD') AS last_mod_ts
FROM users AS u JOIN user_mods AS um ON um.id = u.id
ORDER BY u.name
'''


def main():
    """ This is the entrypoint """
    parser = argparse.ArgumentParser(description=_HELP_MSG)
    parser.add_argument('-U', '--db-user', help='Database user')
    parser.add_argument('-H', '--dbms-host', help='Database host')
    parser.add_argument('-P', '--dbms-port', help='Database port')
    parser.add_argument('-d', '--debug', action='store_true', help='Enable debug mode')
    args = parser.parse_args()

    # Set environment variables if provided
    if args.db_user:
        os.environ['PGUSER'] = args.db_user
    if args.dbms_host:
        os.environ['PGHOST'] = args.dbms_host
    if args.dbms_port:
        os.environ['PGPORT'] = args.dbms_port

    _generate_report(args.debug)


def _generate_report(debug=False):
    with psycopg2.connect(**_get_connection_params()) as conn:
        conn.set_isolation_level(ISOLATION_LEVEL_REPEATABLE_READ)

        with conn.cursor() as cur:
            cur.execute("SET work_mem TO '2GB'")

            for query in _TEMP_TBL_CREATES:
                if debug:
                    print(f"Executing: {query}\n", file=sys.stderr)

                cur.execute(query)

        with conn.cursor('irods_user_last_icat_mod', cursor_factory=DictCursor) as cur:
            if debug:
                print("Generating Report\n", file=sys.stderr)

            cur.execute(_REPORT_QUERY)

            if debug:
                print(f"{cur.rowcount} users", file=sys.stderr)

            for row in cur:
                print(f"{row['name']},{row['last_mod_ts']}")


def _get_connection_params():
    return {
        'host': os.environ.get('PGHOST', 'localhost'),
        'port': os.environ.get('PGPORT', '5432'),
        'user': os.environ.get('PGUSER', os.getenv('USER')),
        'database': 'ICAT'
    }


if __name__ == "__main__":
    main()
