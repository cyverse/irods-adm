#!/bin/bash

show_help()
{
  cat <<EOF
This program filters a list of iRODS sessions for those that overlap with a
given time interval. It reads the sessions from standard in and writes the
filtered sessions to standard out.

USAGE:
 $ExecName ERA_BEGIN ERA_END

PARAMETERS:
 ERA_BEGIN:  The beginning time of the interval of interest. The time should be
             specified in the form yyyy-MM-dd hh:mm:ss.
 ERA_END:    The ending time of the interval of interest. The time should be
             specified in the form yyyy-MM-dd hh:mm:ss.

EXAMPLE:
 $ExecName '2018-01-24 14:08:56' '2018-01-24 14:09:34' < irods.sessions
EOF
}


set -o errexit -o nounset -o pipefail

readonly ExecAbsPath=$(readlink --canonicalize "$0")
readonly ExecName=$(basename "$ExecAbsPath")


main()
{
  if [[ "$#" -lt 2 ]]
  then
    show_help >&2
    return 1
  fi

  local eraBegin="$1"
  local eraEnd="$2"

  filter "$eraBegin" "$eraEnd"
}


filter()
{
  awk --assign ERA_BEGIN="$1" --assign ERA_END="$2" --file - <(cat) <<'EOF'
function validate_era(eraName, eraVal) {
  if (eraVal !~ /^[0-9][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-6][0-9]$/) {
    printf "%s has invalid format: '%s'\n", eraName, eraVal > "/dev/stderr";
    exit 1;
  }
}


BEGIN {
  validate_era("ERA_BEGIN", ERA_BEGIN);
  validate_era("ERA_END", ERA_END);

  RS = "ยง";
  FS = "โข";
}

{
  beginTime = substr($2, 2, 19);
  endTime = substr($NF, 2, 19);

  if (beginTime <= ERA_END && endTime >= ERA_BEGIN) {
    printf "ยง%s", $0;
  }
}
EOF
}


main "$@"
