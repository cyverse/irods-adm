#!/usr/bin/env bash
#
# This program generates a report on the amount of public and private data each
# project has in on a given list of root resources.
#
# Â© 2025, The Arizona Board of Regents on behalf of The University of Arizona.
# For license information, see https://cyverse.org/license.

# TODO document usage

set -o errexit -o nounset -o pipefail

export PGHOST PGPORT PGUSER

EXEC_NAME="$(basename "$(realpath --canonicalize-missing "$0")")"
readonly EXEC_NAME

main() {
	local opts
	if ! opts="$(prep_opts "$@")"; then
		return 1
	fi

	eval set -- "$opts"

	while true; do
		case "$1" in
			-H|--host)
				PGHOST="$2"
				shift 2
				;;
			-P|--port)
				PGPORT="$2"
				shift 2
				;;
			-U|--user)
				PGUSER="$2"
				shift 2
				;;
			--)
				shift
				break
		esac
	done

	local resources="$*"

	gen_report "$(get_local_zone)" "$resources"
}

prep_opts() {
	getopt --longoptions host:,port:,user: --options H:P:U: --name "$EXEC_NAME" -- "$@"
}

gen_report() {
	local zone="$1"
	local rootRescs="$2"

	psql ICAT <<SQL
\\set QUIET on
\\pset footer off

BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;

$(inject_store_resc_tbl "$rootRescs")
$(inject_proj_coll_tbl "$zone")
$(inject_proj_data_tbl)
$(inject_pub_obj_tbl)
$(inject_pub_proj_data_tbl)

\\pset title 'Public and Private Data Volume (GiB) per Project'
SELECT
	ROUND((tot_vol / 2^30)::NUMERIC, 3) AS "Total",
	ROUND((pub_vol / 2^30)::NUMERIC, 3) AS "Public",
	ROUND(((tot_vol - pub_vol) / 2^30)::NUMERIC, 3) AS "Private",
	proj AS "Project"
FROM (
		SELECT a.proj, SUM(a.data_size) AS tot_vol, COALESCE(SUM(p.data_size), 0) AS pub_vol
		FROM proj_data AS a LEFT JOIN pub_proj_data AS p ON p.data_id = a.data_id
		GROUP BY a.proj
	) AS t
ORDER BY proj;

ROLLBACK;
SQL
}

inject_proj_coll_tbl() {
	local zone="$1"

	cat <<EOF
CREATE TEMPORARY TABLE proj_coll (proj, coll_id) ON COMMIT DROP AS
SELECT REGEXP_REPLACE(coll_name, '/$zone/home/shared/([^/]+).*', E'\\\\1'), coll_id
FROM r_coll_main WHERE coll_name LIKE '/$zone/home/shared/%'
	AND coll_name NOT SIMILAR TO '/$zone/home/shared/commons_repo(/%)?';

CREATE INDEX proj_coll_idx ON proj_coll(coll_id);
EOF
}

inject_proj_data_tbl() {
	cat <<'EOF'
CREATE TEMPORARY TABLE proj_data (proj, coll_id, data_id, data_size) ON COMMIT DROP AS
SELECT c.proj, c.coll_id, d.data_id, d.data_size
FROM proj_coll AS c JOIN r_data_main AS d ON d.coll_id = c.coll_id
WHERE d.resc_id IN (SELECT id FROM store_resc);

CREATE INDEX proj_data_coll_data_idx ON proj_data(coll_id, data_id);

CREATE INDEX proj_data_data_idx ON proj_data(data_id);
EOF
}

inject_pub_obj_tbl() {
	cat <<'EOF'
CREATE TEMPORARY TABLE pub_obj (id) ON COMMIT DROP AS
SELECT object_id
FROM r_objt_access
WHERE user_id = (SELECT user_id FROM r_user_main WHERE user_name = 'public');

CREATE INDEX pub_obj_idx ON pub_obj(id);
EOF
}

inject_pub_proj_data_tbl() {
	cat <<'EOF'
CREATE TEMPORARY TABLE pub_proj_data (proj, data_id, data_size) ON COMMIT DROP AS
SELECT proj, data_id, data_size
FROM proj_data
WHERE coll_id IN (SELECT id FROM pub_obj) AND data_id IN (SELECT id FROM pub_obj);

CREATE INDEX pub_proj_data_data_idx ON pub_proj_data(data_id);

CREATE INDEX pub_proj_data_proj_idx ON pub_proj_data(proj);
EOF
}

inject_store_resc_tbl() {
	local rootRescs="$1"

	cat <<EOF
CREATE TEMPORARY TABLE store_resc (id) ON COMMIT DROP AS
WITH RECURSIVE resc_hier(resc_id, resc_net) AS (
	SELECT resc_id, resc_net
		FROM r_resc_main
		WHERE resc_name IN ($(fmt_sql_list "$rootRescs"))
	UNION SELECT m.resc_id, m.resc_net
		FROM resc_hier AS h JOIN r_resc_main AS m ON m.resc_parent = h.resc_id::TEXT
		WHERE h.resc_net = 'EMPTY_RESC_HOST' )
SELECT resc_id FROM resc_hier;

CREATE INDEX store_resc_idx ON store_resc(id);
EOF
}

fmt_sql_list() {
	local elmts
	readarray -t elmts <<< "$@"

	local list=''

	local elmt
	for elmt in "${elmts[@]}"; do
		if [[ -n "$list" ]]; then
			list+=', '
		fi

		list+="'$elmt'"
	done

	echo "$list"
}

get_local_zone() {
	psql --no-align --tuples-only \
		--command="SELECT zone_name FROM r_zone_main WHERE zone_type_name = 'local'" \
		ICAT
}

main "$@"
