#!/bin/bash

show_help()
{
  cat <<EOF

$ExecName version $Version

Usage:
 $ExecName [options] HOST

Checks to see is if an iRODS service is online. If connects to iRODS is it
prints 'up' to standard output and exits with status code 0. If it doesn't
connect to anything, it prints 'down' to standard output and exits with status
code 1. If it connects to something that isn't iRODS, it prints 'not iRODS' and
exits with status code 2.

The rodsLog will show a connection from the host where this is run with the proxy
user set to $ExecName. If SERVICE is specified, the client user will be se to
SERVICE. If ZONE is specificed, the zone for both users will be ZONE.

If ips happens to be called while this is program is connected to iRODS, ips
will show this program's connection as comming from $ExecName.

Parameters:
 HOST  the FQDN or IP address of the server hosting the service

Options:
 -P, --port PORT        the TCP port the iRODS listens to on HOST (default 1247)
 -S, --service SERVICE  the name of the service checking iRODS, identified as
                        client user to iRODS
 -Z, --zone ZONE        the name of the zone to tell iRODS this program and
                        SERVICE belong to.

 -h, --help     show help and exit
 -V, --verbose  show the XML message returned from HOST
 -v, --version  show version and exit
EOF
}


readonly ExecAbsPath=$(readlink --canonicalize "$0")
readonly ExecName=$(basename "$ExecAbsPath")
readonly Version=1

readonly ReqStore=$(mktemp)
trap 'rm -rf "$ReqStore"' EXIT


main()
{
  local opts
  if ! opts=$(format_opts "$@")
  then
    exit_with_help
  fi

  eval set -- "$opts"

  local port=1247
  local service
  local verbose=0
  local zone

  while true
  do
    case "$1" in
      -h|--help)
        show_help
        return 0
        ;;
      -P|--port)
        port="$2"
        shift 2
        ;;
      -S|--service)
        service="$2"
        shift 2
        ;;
      -V|--verbose)
        verbose=1
        shift
        ;;
      -v|--version)
        show_version
        return 0
        ;;
      -Z|--zone)
        zone="$2"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        exit_with_help
        ;;
    esac
  done

  if [ "$#" -lt 1 ]
  then
    exit_with_help
  fi

  local ies="$1"

  ping "$verbose" "$ies" "$port" "$service" "$zone"
}


close_conn()
{
  exec 3<&-
  exec 3>&-
}


decode_header_len()
{
  local lenHex
  lenHex=$(od --address-radix n --format x1 --read-bytes 4 | tr --delete ' ')

  printf '%d' $((16#$lenHex))
}


display_resp()
{
  local verbose="$1"

  if [ "$verbose" -ne 0 ]
  then
    cat
    printf '\n'
  fi
}


encode_header_len()
{
  local len="$1"

  printf '0: %.8x' "$len" | xxd -revert -g 0
}


exit_with_help()
{
  show_help >&2
  exit 1
}


format_opts()
{
  getopt \
    --longoptions help,port:,service:,verbose,version,zone: \
    --name "$ExecName" \
    --options hP:S:VvZ: \
    -- "$@"
}


mk_header()
{
  local type="$1"
  local msgLen="$2"

  cat <<EOX
<MsgHeader_PI>
  <type>$type</type>
  <msgLen>$msgLen</msgLen>
  <errorLen>0</errorLen>
  <bsLen>0</bsLen>
</MsgHeader_PI>
EOX
}


mk_req()
{
  local msgType="$1"

  local msg
  if [ $# -ge 2 ]
  then
    msg="$2"
  fi

  local header
  header=$(mk_header "$msgType" ${#msg})

  encode_header_len ${#header} > "$ReqStore"
  printf '%s%s' "$header" "$msg" >> "$ReqStore"
  cat "$ReqStore"
}


mk_startup_pack()
{
  local clientUser="$1"
  local rcatZone="$2"

  cat <<EOX
<StartupPack_PI>
  <connectCnt>0</connectCnt>
  <proxyUser>$ExecName</proxyUser>
  <proxyRcatZone>$rcatZone</proxyRcatZone>
  <clientUser>$clientUser</clientUser>
  <clientRcatZone>$rcatZone</clientRcatZone>
  <relVersion></relVersion>
  <apiVersion></apiVersion>
  <option>$ExecName</option>
</StartupPack_PI>
EOX
}


parse_resp()
{
  local headerLen
  headerLen=$(decode_header_len)

  local header
  read -r -d '' -n "$headerLen" header

  if ! [[ "$header" =~ ^\<MsgHeader_PI\>.*\<type\>RODS_VERSION\</type\>.*\<msgLen\>[0-9]+\< ]]
  then
    return 1
  fi

  local msgLen="${header#*<msgLen>}"
  msgLen="${msgLen%%<*}"

  local msg
  read -r -d '' -n "$msgLen" msg
  printf '%s' "$msg"
}


ping()
{
  local verbose="$1"
  local ies="$2"
  local port="$3"
  local service="$4"
  local zone="$5"

  if ! exec 3<>/dev/tcp/"$ies"/"$port"
  then
    printf 'down\n'
    return 1
  fi

  local connMsgBody
  connMsgBody=$(mk_startup_pack "$service" "$zone")

  if mk_req RODS_CONNECT "$connMsgBody" >&3
  then
    local respMsg
    if respMsg=$(parse_resp <&3)
    then
      mk_req RODS_DISCONNECT >&3
      close_conn

      if [ "$verbose" -eq 0 ]
      then
        printf 'up\n'
      else
        printf '%s\n' "$respMsg"
      fi

      return 0
    fi
  fi

  close_conn
  printf 'not iRODS\n'
  return 2
}


show_version()
{
  printf '%s\n' "$Version"
}


main "$@"
