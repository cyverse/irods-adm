#!/bin/bash

show_help()
{
  cat <<EOF

$ExecName version $Version

Usage:
 $ExecName [options] CLASS-BASE

Reads the output of the \`repl\` command and groups the data objects that failed
to replicate into different files based on the error that occurred.

Parameters:
 CLASS-BASE  the common basename of the files that hold the groups of data
             objects

Options:
 -h, --help     show help and exit
 -v, --version  show verion and exit

Summary:

The program reads the output of the \`repl\` command from standard in. It groups
the data objects that failed to replicate into different files based on the
error that occurred. Here's a breakdown of what each output file holds.

CLASS-BASE.src_path_errors holds the paths to data objects that have paths that
cause \`irepl\` problems.

CLASS-BASE.broken_conn holds the paths to data object where the connection to
the IES was broken.

CLASS-BASE.chksum_mismatches holds the paths to data objects with checksums that
differ from the checksums of their respective physical files.

CLASS-BASE.connection_reset holds the paths to data objects where the
connections were reset during the replication.

CLASS-BASE.missing_file holds the paths to data objects that are missing their
physical files.

CLASS-BASE.short_file holds the paths to data objects having sizes larger than
their respective physical files' sizes.

CLASS-BASE.timeout holds the paths to data objects that failed replication due
to a connection timeout.

CLASS-BASE.unclassified_repl_errors holds the log messages for replication
related errors that couldn't be classified.

CLASS-BASE.unclassified_errors holds the full log messages for errors that
couldn't be classified at all.
EOF
}


readonly Version=2

set -o errexit -o nounset -o pipefail

readonly ExecAbsPath=$(readlink --canonicalize "$0")
readonly ExecName=$(basename "$ExecAbsPath")

declare -a TempFiles


main()
{
  local opts
  if ! opts=$(getopt --name "$ExecName" --options hv --longoptions help,version -- "$@")
  then
    show_help >&2
    return 1
  fi

  eval set -- "$opts"

  while true
  do
    case "$1" in
      -h|--help)
        show_help
        return 0
        ;;
      -v|--version)
        printf '%s\n' "$Version"
        return 0
        ;;
      --)
        shift
        break
        ;;
      *)
        show_help >&2
        return 1
        ;;
    esac
  done

  if [[ "$#" -lt 1 ]]
  then
    show_help >&2
    return 1
  fi

  local logBase="$1"

  trap remove_temp_files EXIT
  process_input "$logBase"
}


remove_temp_files()
{
  if [[ "${#TempFiles[@]}" -gt 0 ]]
  then
    rm --force "${TempFiles[@]}"
  fi
}


process_input()
{
  local logBase="$1"

  local errorsFile
  errorsFile=$(mktemp)
  TempFiles+=("$errorsFile")

  filter_errors | sort > "$errorsFile"

  local errCnt
  errCnt=$(wc --lines < "$errorsFile")

  display_error_count errors "$errCnt" "$errCnt"
  classify_errors "$errorsFile" "$errCnt" "$logBase"
}


filter_errors ()
{
  sed --quiet --file - <(cat) <<'EOF'
/.*ERROR: [^\[].*$/ {
  s/.*ERROR: \([^\[].*$\)/\1/
  /connectToRhost: readVersion to .* failed, msg=/d
  /^cliReconnManager: .*, status = -305111/d
  /^replUtil: invalid repl objType 0 for /d
  p
}
EOF
}


classify_errors()
{
  local errorsFile="$1"
  local errCnt="$2"
  local logBase="$3"

  local sPECnt
  sPECnt=$(split_out_class "$errorsFile" \
                           '^replUtil: srcPath \(.*\) does not exist$' \
                           '\1' \
                           "$logBase".src_path_errors)

  display_error_count 'source path errors' "$sPECnt" "$errCnt"

  local replErrorsFile
  replErrorsFile=$(mktemp)
  TempFiles+=("$replErrorsFile")

  split_out_class "$errorsFile" '^replUtil: repl error for ' '' "$replErrorsFile" > /dev/null
  sort --output "$replErrorsFile" "$replErrorsFile"
  classify_repl_errors "$replErrorsFile" "$errCnt" "$logBase"

  local unclassifiedErrCnt
  unclassifiedErrCnt=$(wc --lines < "$errorsFile")

  display_error_count 'unclassified errors' "$unclassifiedErrCnt" "$errCnt"

  if [[ "$unclassifiedErrCnt" -gt 0 ]]
  then
    mv "$errorsFile" "$logBase".unclassified_errors
  fi
}


classify_repl_errors()
{
  local replErrorsFile="$1"
  local totErrCnt="$2"
  local logBase="$3"

  local sHRLCnt
  sHRLCnt=$(split_out_repl_class "$replErrorsFile" -4000 SYS_HEADER_READ_LEN_ERR \
                                 "$logBase".broken_conn)

  local sCLECnt
  sCLECnt=$(split_out_repl_class "$replErrorsFile" -27000 SYS_COPY_LEN_ERR "$logBase".short_file)

  local cRBPCnt
  cRBPCnt=$(split_out_repl_class "$replErrorsFile" -116104 \
                                 'SYS_SOCK_READ_ERR, Connection reset by peer' \
                                 "$logBase".connection_reset)

  local sSRTCnt
  sSRTCnt=$(split_out_repl_class "$replErrorsFile" -115000 SYS_SOCK_READ_TIMEDOUT \
                                 "$logBase".timeout)

  local uCMCnt
  uCMCnt=$(split_out_repl_class "$replErrorsFile" -314000 USER_CHKSUM_MISMATCH \
                                "$logBase".chksum_mismatches)

  local uFOECnt
  uFOECnt=$(split_out_repl_class "$replErrorsFile" -510002 \
                                 'UNIX_FILE_OPEN_ERR, No such file or directory' \
                                 "$logBase".missing_file)

  local unclassifiedReplErrCnt
  unclassifiedReplErrCnt=$(wc --lines < "$replErrorsFile")

  if [[ "$unclassifiedReplErrCnt" -gt 0 ]]
  then
    mv "$replErrorsFile" "$logBase".unclassified_repl_errors
  fi

  display_error_count 'broken connections' "$sHRLCnt" "$totErrCnt"
  display_error_count 'checksum mismatches' "$uCMCnt" "$totErrCnt"
  display_error_count 'connections reset' "$cRBPCnt" "$totErrCnt"
  display_error_count 'file open errors' "$uFOECnt" "$totErrCnt"
  display_error_count 'short files' "$sCLECnt" "$totErrCnt"
  display_error_count timeouts "$sSRTCnt" "$totErrCnt"
  display_error_count 'unclassified replication errors' "$unclassifiedReplErrCnt" "$totErrCnt"
}


display_error_count()
{
  local label="$1"
  local count="$2"
  local total="$3"

  printf '%*d %s\n' "${#total}" "$count" "$label"
}


split_out_repl_class()
{
  local errorsFile="$1"
  local status="$2"
  local error="$3"
  local classFile="$4"

  split_out_class "$errorsFile" ", status = $status status = $status $error\$" '' "$classFile"
}


split_out_class()
{
  local errorsFile="$1"
  local classifier="$2"
  local substitution="$3"
  local classFile="$4"

  local errors
  errors=$(cat "$errorsFile")

  local classifiedErrors
  classifiedErrors=$(sed --quiet "/$classifier/p" <<< "$errors")

  if [[ -n "$classifiedErrors" ]]
  then
    comm -2 -3 <(echo "$errors") <(echo "$classifiedErrors") > "$errorsFile"
    sed "s/$classifier/$substitution/" <<< "$classifiedErrors" > "$classFile"
    wc --lines <<< "$classifiedErrors"
  else
    printf '0'
  fi
}


main "$@"
