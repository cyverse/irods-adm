#!/bin/bash

show_help()
{
  cat <<EOF

$ExecName version $Version

Usage:
 $ExecName [options]

This program generates a report on the data objects in the home collections of
the local zone that need to be replicated. An object needs to be replicated if
it was created before a given day at midnight and has no replica yet. The report
lists the number of unreplicated data objects and their volume broken down by
the storage resource holding the corresponding files.

The caller must have an initialized iRODS session, i.e., called \`iinit\` to open
an iRODS session with a cached authentication credentials.

Options:
 -A, --age <age>    how many days old a data object must be to be replicated.
                    a negative number means no time restriction. default: 1
 -d, --debug        display progress and query time information
 -H, --host <host>  connect to the ICAT's DBMS on the host <host> instead of
                    the PostgreSQL default
 -h, --help         display help text and exit
 -P, --port <port>  connect to the ICAT's DBMS listening on TCP port <port>
                    instead of the PostgreSQL default
 -U, --user <user>  authorize the DBMS connection as user <user> instead of the
                    default.
 -v, --version      display version and exit
EOF
}


readonly Version=7

set -o errexit -o nounset -o pipefail

export PGHOST PGPORT PGUSER

readonly ExecPath=$(readlink --canonicalize "$0")
readonly ExecName=$(basename "$ExecPath")
readonly DefaultAge=1

declare Debug


main()
{
  local opts
  if ! opts=$(prep_opts "$@")
  then
    show_help >&2
    return 1
  fi

  eval set -- "$opts"

  local age="$DefaultAge"

  while true
  do
    case "$1" in
      -A|--age)
        age="$2"
        shift 2
        ;;
      -d|--debug)
        Debug=debug
        shift
        ;;
      -h|--help)
        show_help
        return 0
        ;;
      -H|--host)
        PGHOST="$2"
        shift 2
        ;;
      -P|--port)
        PGPORT="$2"
        shift 2
        ;;
      -U|--user)
        PGUSER="$2"
        shift 2
        ;;
      -v|--version)
        printf '%s\n' "$Version"
        return 0
        ;;
      --)
        shift
        break
        ;;
      *)
        show_help >&2
        return 1
        ;;
    esac
  done

  mk_report "$age"
}


prep_opts()
{
  getopt \
    --longoptions age:,debug,help,host:,port:,user:,version \
    --options A:dhH:P:U:v \
    --name "$ExecName" \
    -- \
    "$@"
}


mk_report()
{
  local age="$1"

  psql --quiet ICAT \
<<EOSQL
  \\pset footer off
  $(inject_debug_stmt \\timing on)
  $(inject_debug_quiet off)

  BEGIN;

  $(inject_debug_msg Gathering unreplicated data)
  CREATE TEMPORARY TABLE unreplicated_data(root_resc, store_resc, size) AS
    SELECT d.resc_name, d.resc_hier, d.data_size
    FROM r_data_main AS d JOIN r_coll_main AS c ON c.coll_id = d.coll_id
    WHERE d.data_id IN (SELECT data_id FROM r_data_main GROUP BY data_id HAVING COUNT(*) = 1)
      AND c.coll_name
        LIKE '/' || (SELECT zone_name FROM r_zone_main WHERE zone_type_name = 'local') || '/home/%'
      AND $(inject_time_restriction "$age");

  CREATE INDEX idx_unreplicated_root_resc ON unreplicated_data(root_resc);
  CREATE INDEX idx_unreplicated_store_resc ON unreplicated_data(store_resc);

  \\echo

  $(inject_debug_newline)
  $(inject_set_title Unreplicated in Storage Resources)
  SELECT
    SUBSTRING(store_resc FROM '(%;)*#"%#"' FOR '#')  AS "Storage Resource",
    COUNT(*)                                         AS "Count",
    ROUND(CAST(SUM(size) / 2 ^ 40 AS NUMERIC), 3)    AS "Volume (TiB)"
  FROM unreplicated_data
  GROUP BY store_resc
  ORDER BY 1;

  $(inject_debug_newline)
  $(inject_set_title Unreplicated in Root Resources)
  SELECT
    root_resc                                      AS "Root Resource",
    COUNT(*)                                       AS "Count",
    ROUND(CAST(SUM(size) / 2 ^ 40 AS NUMERIC), 3)  AS "Volume (TiB)"
  FROM unreplicated_data
  GROUP BY root_resc
  ORDER BY root_resc;

  $(inject_debug_newline)
  $(inject_debug_newline)
  ROLLBACK;
EOSQL
}


inject_debug_msg()
{
  local msg="$*"

  inject_debug_newline
  inject_debug_stmt "\echo '$msg'"
}


inject_debug_newline()
{
  inject_debug_stmt \\echo
}


inject_debug_quiet()
{
  local state="$1"

  inject_debug_stmt \\set QUIET "$state"
}


inject_debug_stmt()
{
  local stmt="$*"

  if [[ -n "${Debug-}" ]]
  then
    printf '%s\n' "$stmt"
  fi
}


inject_set_title()
{
  local title="$*"

  inject_debug_quiet on
  printf $'\pset title \'%s\'\n' "$title"
  inject_debug_quiet off
}


inject_time_restriction()
{
  local age="$1"

  if [[ "$age" -lt 0 ]]
  then
    # No time restriction

    printf TRUE
  else
    # Determine midnight of the desired day.

    local supCreateDate
    supCreateDate=$(date --iso-8601 --date "$age days ago")

    local supCreateTs
    supCreateTs=$(date --date "$supCreateDate" '+%s')
    printf $'d.create_ts < \'%011d\'' "$supCreateTs"
  fi
}


main "$@"
