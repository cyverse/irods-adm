#!/bin/bash

readonly ExecName=$(basename "$0")
readonly Version=4


show_help()
{
  cat <<EOF

$ExecName version $Version

Usage:
 $ExecName [options]

This program generates a report on the data objects in /iplant/home that need to
be replicated. An object needs to be replicated if it was created before
yesterday and has no replica yet. The report lists the number of unreplicated
data objects and their volume broken down by the storage resource holding the
corresponding files.

Options:
 -H, --host <host>  connect to the ICAT's DBMS on the host <host> instead of
                    the PostgreSQL default
 -P, --port <port>  connect to the ICAT's DBMS listening on TCP port <port>
                    instead of the PostgreSQL default
 -U, --user <user>  authorize the DBMS connection as user <user> instead of the
                    default.

 -d, --debug    display progress and query time information
 -f, --full     include all unreplicated objects, not just the ones created
                before yesterday
 -h, --help     display help text and exit
 -v, --version  display version and exit
EOF
}


Debug=false


main()
{
  local opts
  opts=$(getopt --longoptions debug,full,help,host:,port:,user:,version \
                --name "$ExecName" \
                --options dfhH:P:U:v \
                -- \
                "$@")
  local ret="$?"
  if [[ "$ret" != 0 ]]
  then
    show_help >&2
    return 1
  fi

  eval set -- "$opts"

  while true
  do
    case "$1" in
      -d|--debug)
        Debug=true
        shift
        ;;
      -f|--full)
        local timeRestriction=false
        shift
        ;;
      -h|--help)
        show_help
        return 0
        ;;
      -H|--host)
        export PGHOST="$2"
        shift 2
        ;;
      -P|--port)
        export PGPORT="$2"
        shift 2
        ;;
      -U|--user)
        export PGUSER="$2"
        shift 2
        ;;
      -v|--version)
        show_version
        return 0
        ;;
      --)
        shift
        break
        ;;
      *)
        show_help >&2
        return 1
        ;;
    esac
  done

  mk_report "${timeRestriction-true}"
}


inject_debug_msg()
{
  local msg="$*"

  inject_debug_newline
  inject_debug_stmt "\echo '$msg'"
}


inject_debug_newline()
{
  inject_debug_stmt \\echo
}


inject_debug_quiet()
{
  local state="$1"

  inject_debug_stmt \\set QUIET "$state"
}


inject_debug_stmt()
{
  local stmt="$*"

  if [[ "$Debug" == true ]]
  then
    printf '%s\n' "$stmt"
  fi
}


inject_set_title()
{
  local title="$*"

  inject_debug_quiet on
  printf '\pset title '\''%s'\''\n' "$title"
  inject_debug_quiet off
}


inject_time_restriction()
{
  local timeRestriction="$1"

  if [[ "$timeRestriction" == false ]]
  then
    printf TRUE
  else
    local supCreateTs
    supCreateTs=$(date --date "$(date --iso-8601 --date yesterday)" '+%s')
    printf 'create_ts < '\''0%s'\' "$supCreateTs"
  fi
}


mk_report()
{
  local timeRestriction="$1"

  psql --quiet ICAT <<EOSQL
    \\pset footer off
    $(inject_debug_stmt \\timing on)
    $(inject_debug_quiet off)

    BEGIN;

    $(inject_debug_msg Gathering unreplicated data)
    CREATE TEMPORARY TABLE unreplicated_data(root_resc, store_resc, size) AS
    SELECT resc_name, resc_hier, data_size
    FROM r_data_main
    WHERE data_id IN (SELECT data_id FROM r_data_main GROUP BY data_id HAVING COUNT(*) = 1)
    AND coll_id IN (SELECT coll_id FROM r_coll_main WHERE coll_name LIKE '/iplant/home/%')
    AND $(inject_time_restriction "$timeRestriction");

    CREATE INDEX idx_unreplicated_root_resc ON unreplicated_data(root_resc);
    CREATE INDEX idx_unreplicated_store_resc ON unreplicated_data(store_resc);

    \\echo

    $(inject_debug_newline)
    $(inject_set_title Unreplicated in Storage Resources)
    SELECT
      SUBSTRING(store_resc FROM '(%;)*#"%#"' FOR '#')  AS "storage resource",
      COUNT(*)                                         AS count,
      SUM(size) / 2 ^ 40                               AS "volume (TiB)"
    FROM unreplicated_data
    GROUP BY store_resc
    ORDER BY 1;

    $(inject_debug_newline)
    $(inject_set_title Unreplicated in Root Resources)
    SELECT root_resc AS "root resource", COUNT(*) AS count, SUM(size) / 2 ^ 40 AS "volume (TiB)"
    FROM unreplicated_data
    GROUP BY root_resc
    ORDER BY root_resc;

    $(inject_debug_newline)
    $(inject_debug_newline)
    ROLLBACK;
EOSQL
}


show_version()
{
  printf '%s\n' "$Version"
}


main "$@"
