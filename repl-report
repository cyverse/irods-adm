#!/bin/bash

help() {
	cat <<EOF

$EXEC_NAME version $VERSION

Usage:
 $EXEC_NAME [options]

This program generates a report on the data objects in the home collections of
the local zone that need to be replicated. An object needs to be replicated if
it was created before a given day at midnight and has no replica yet. The report
lists the number of unreplicated data objects and their volume broken down by
the storage resource holding the corresponding files.

The caller must have an initialized iRODS session, i.e., called \`iinit\` to open
an iRODS session with a cached authentication credentials.

Options:
 -A, --age AGE                how many days old a data object must be to be
                              replicated. A negative number means no time
                              restriction. default: 1
 -C, --collection COLLECTION  only consider data objects in this collection
 -d, --debug                  display progress and query time information
 -h, --help                   display help text and exit
 -H, --host HOST              connect to the ICAT's DBMS on the host HOST
                              instead of the PostgreSQL default
 -P, --port PORT              connect to the ICAT's DBMS listening on TCP port
                              PORT instead of the PostgreSQL default
 -U, --user USER              authorize the DBMS connection as user USER instead
                              of the default
 -v, --version                display version and exit

Â© 2020, The Arizona Board of Regents on behalf of The University of Arizona. For
license information, see https://cyverse.org/license.
EOF
}


readonly VERSION=8

set -o errexit -o nounset -o pipefail

export PGHOST PGPORT PGUSER

readonly EXEC_PATH="$(realpath --canonicalize-missing "$0")"
readonly EXEC_NAME="$(basename "$EXEC_PATH")"
readonly DEFAULT_AGE=1

declare Debug


main() {
	local opts
	if ! opts="$(prep_opts "$@")"
	then
		help >&2
		return 1
	fi

	eval set -- "$opts"

	local age="$DEFAULT_AGE"

	local collection
	local help
	local version

	while true
	do
		case "$1" in
			-A|--age)
				age="$2"
				shift 2
				;;
			-C|--collection)
				collection="$2"
				shift 2
				;;
			-d|--debug)
				Debug=debug
				shift
				;;
				-h|--help)
				help=help
				shift
				;;
			-H|--host)
				PGHOST="$2"
				shift 2
				;;
			-P|--port)
				PGPORT="$2"
				shift 2
				;;
			-U|--user)
				PGUSER="$2"
				shift 2
				;;
			-v|--version)
				version=version
				shift
				;;
			--)
				shift
				break
				;;
			*)
				help >&2
				return 1
				;;
		esac
	done

	if [[ -n "${help-}" ]]
	then
		help
		return 0
	fi

	if [[ -n "${version-}" ]]
	then
		printf '%s\n' "$VERSION"
		return 0
	fi

	mk_report "$age" "${collection-}"
}


prep_opts() {
	getopt \
		--longoptions age:,collection:,debug,help,host:,port:,user:,version \
		--options A:C:dhH:P:U:v \
		--name "$EXEC_NAME" \
		-- \
		"$@"
}


mk_report() {
	local age="$1"
	local collection="$2"

	psql --quiet ICAT \
<<EOSQL
\\pset footer off
$(inject_debug_stmt \\timing on)
$(inject_debug_quiet off)

BEGIN;

$(inject_debug_msg Gathering unreplicated data)
CREATE TEMPORARY TABLE unreplicated_data(root_resc, store_resc, size) ON COMMIT DROP AS
SELECT d.resc_name, SUBSTRING(d.resc_hier FROM '(%;)*#"[^;]+#"' FOR '#'), d.data_size
FROM r_data_main AS d JOIN r_coll_main AS c ON c.coll_id = d.coll_id
WHERE d.data_id IN (SELECT data_id FROM r_data_main GROUP BY data_id HAVING COUNT(*) = 1)
	AND ($(inject_collection_restriction c "$collection"))
	AND ($(inject_time_restriction d "$age"));

CREATE INDEX idx_unreplicated_root_resc ON unreplicated_data(root_resc);
CREATE INDEX idx_unreplicated_store_resc ON unreplicated_data(store_resc);

\\echo

$(inject_debug_newline)
$(inject_set_title Unreplicated in Storage Resources)
SELECT
	store_resc                                     AS "Storage Resource",
	COUNT(*)                                       AS "Count",
	ROUND(CAST(SUM(size) / 2 ^ 40 AS NUMERIC), 3)  AS "Volume (TiB)"
FROM unreplicated_data
GROUP BY store_resc
ORDER BY store_resc;

$(inject_debug_newline)
$(inject_set_title Unreplicated in Root Resources)
SELECT
	root_resc                                      AS "Root Resource",
	COUNT(*)                                       AS "Count",
	ROUND(CAST(SUM(size) / 2 ^ 40 AS NUMERIC), 3)  AS "Volume (TiB)"
	FROM unreplicated_data
GROUP BY root_resc
ORDER BY root_resc;

$(inject_debug_newline)
$(inject_debug_newline)
ROLLBACK;
EOSQL
}


inject_debug_msg() {
	local msg="$*"

	inject_debug_newline
	inject_debug_stmt "\echo '$msg'"
}


inject_debug_newline() {
	inject_debug_stmt \\echo
}


inject_debug_quiet() {
	local state="$1"

	inject_debug_stmt \\set QUIET "$state"
}


inject_debug_stmt() {
	local stmt="$*"

	if [[ -n "${Debug-}" ]]
	then
		printf '%s\n' "$stmt"
	fi
}


inject_set_title() {
	local title="$*"

	inject_debug_quiet on
	printf $'\pset title \'%s\'\n' "$title"
	inject_debug_quiet off
}


inject_collection_restriction() {
	local collTable="$1"
	local collection="$2"

	if [[ -n "$collection" ]]
	then
		local colName="$collTable".coll_name
		printf $'%s = \'%s\' OR %s LIKE \'%s/%%\'' "$colName" "$collection" "$colName" "$collection"
	else
		printf TRUE
	fi
}


inject_time_restriction() {
	local dataTable="$1"
	local age="$2"

	if [[ "$age" -lt 0 ]]
	then
		# No time restriction

 		printf TRUE
	else
		# Determine midnight of the desired day.

		local supCreateDate
		supCreateDate="$(date --iso-8601 --date "$age days ago")"

		local supCreateTs
		supCreateTs="$(date --date "$supCreateDate" '+%s')"
		printf $'%s.create_ts < \'%011d\'' "$dataTable" "$supCreateTs"
	fi
}


main "$@"
