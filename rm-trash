#!/bin/bash

show_help()
{
  cat <<EOF

$ExecName version $Version

Usage:
 $ExecName [options]

This script deletes the trash older than one month. It deletes the oldest trash
first. It writes a complete report of everything deleted to standard output by
default with all error messages be written to both standard error. If the output
is directed to FILE, error messages will still be written to standard error in
addition to FILE. In any case, each message written is formatted in syslog
style.

Options:
 -h, --help      show help and exit
 -L, --log FILE  write all output to FILE
 -v, --version   show version and exit
EOF
}


readonly Version=3

set -o nounset -o pipefail
trap 'exit 130' INT

if [[ -z "${STDBUF-}" ]]
then
  STDBUF=yes /usr/bin/stdbuf --error L --output L "$0" "$@"
  exit $?
fi

export UNKNOWN_ERROR=3

readonly ExecAbsPath=$(readlink --canonicalize "$0")
readonly ExecName=$(basename "$ExecAbsPath")
readonly Concurrency=4


main()
{
  declare -A optMap=(
    [help]=''
    [version]=''
    [log]=''
  )

  if ! map_opts optMap "$@"
  then
    show_help >&2
    return 1
  fi

  if [[ -n "${optMap[help]}" ]]
  then
    show_help
    return 0
  fi

  if [[ -n "${optMap[version]}" ]]
  then
    printf '%s\n' "$Version"
    return 0
  fi

  if [[ -n "${optMap[log]}" ]]
  then
    if ! redirect_stdout "${optMap[log]}"
    then
      return 1
    fi
  fi

  local trashTmpFiles
  if ! trashTmpFiles=$(mktemp)
  then
    # shellcheck disable=SC2182
    printf 'Failed to create database for temporary files\n' >(disp_err)
    return 1
  fi

  # shellcheck disable=SC2064
  trap "rm_temps '$trashTmpFiles' 2> >(disp_err) > >(disp_out)" EXIT

  rm_trash "$trashTmpFiles" 2> >(disp_err) > >(disp_out)
}


map_opts()
{
  local mapVar="$1"
  shift

  local opts
  if ! opts=$(getopt --longoptions help,log:,version --options hL:v --name "$ExecName" -- "$@")
  then
    return 1
  fi

  eval set -- "$opts"

  while true
  do
    case "$1" in
      -h|--help)
        eval "$mapVar[help]=help"
        shift
        ;;
      -L|--log)
        eval "$mapVar[log]='$2'"
        shift 2
        ;;
      -v|--version)
        eval "$mapVar[version]=version"
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
        return 1
        ;;
    esac
  done
}


redirect_stdout()
{
  local logFile="$1"

  exec 1>&-

  if ! exec 1>>"$logFile"
  then
    exec 1>/dev/stdout
    printf 'Failed to open %s for writing\n' "$logFile" >&2
    return 1
  fi
}


rm_temps()
{
  local trashTempFiles="$1"

  xargs --no-run-if-empty rm --force < "$trashTempFiles"
  rm --force "$trashTempFiles"
}


disp_err()
{
  local parallelPat='(parallel:| Hangup  *parallel) '

  local err
  while IFS= read -r err
  do
    err="${err#ERROR: }"
    
    if ! [[ "$err" =~ $parallelPat ]]
    then
      fmt_msg ERROR "$err"
    fi
  done | route_err
}


disp_out()
{
  while IFS= read -r msg
  do
    fmt_msg INFO "$msg"
  done
}


fmt_msg()
{
  local type="$1"
  local body="$2"

  printf '%s %s: %s\n' "$(date --iso-8601=seconds)" "$type" "$body"
}


route_err()
{
  if [[ -t 1 ]]
  then
    cat >&2
  else
    tee /dev/stderr
  fi
}


rm_trash()
{
  local trashTempFiles="$1"

  local zone
  zone=$(ienv | sed --quiet 's/NOTICE: irods_zone_name - //p')

  local trashList
  trashList=$(mk_temp "$trashTempFiles")

  if ! trashed_data "$zone" > "$trashList"
  then
    printf 'failed to determine data objects to delete\n' >&2
    return 1
  fi

  local delTot
  delTot=$(wc --lines < "$trashList")
  printf '%d data objects will be deleted\n' "$delTot"

  parallel --line-buffer --no-notice --no-run-if-empty --delimiter '\n' --max-args 100 --max-procs "$Concurrency" RM_DATA_BATCH < "$trashList"
  local rc="$?"
  if [[ "$rc" -eq 129 ]]
  then
    printf 'EXITING\n' >&2
    return 1
  fi

  if ! base_collections "$zone" > "$trashList"
  then
    printf 'failed to determine base trash collecitons\n' >&2
    return 0
  fi

  delTot=$(wc --lines < "$trashList")
  printf '%d base collections will be pruned\n' "$delTot"

  local parent
  while read -r parent
  do
    if ! prune_children "$trashTempFiles" "$parent"
    then
      printf 'Failed to prune base collection %s\n' "$parent" >&2
    else
      printf 'Pruned base collection %s\n' "$parent"
    fi
  done < "$trashList"

  rm --force "$trashList"
}


base_collections()
{
  local zone="$1"

  quest \
      '%s' \
      "select order(COLL_NAME)
       where COLL_PARENT_NAME = '/$zone/trash' || = '/$zone/trash/home'
         and COLL_NAME != '/$zone/trash/home'"
}


trashed_data()
{
  local zone="$1"

  local upperBound
  upperBound=$(date --date "$(date --iso-8601 --date '1 month ago')" '+%s')

  quest \
      '%s %s/%s' \
      "select max(DATA_MODIFY_TIME), COLL_NAME, DATA_NAME where COLL_NAME like '/$zone/trash/%'" \
    | sort --numeric --key 1,1 \
    | truncate_by_time "$upperBound" \
    | cut --delimiter ' ' --fields 2-
}


prune_children()
{
  local trashTempFiles="$1"
  local parent="$2"

  local rc=0

  local childList
  childList=$(mk_temp "$trashTempFiles")

  if quest '%s' "select COLL_NAME where COLL_PARENT_NAME = '$parent'" > "$childList"
  then
    local collection
    while read -r collection
    do
      if ! prune_collection "$trashTempFiles" "$collection"
      then
        rc=1
      fi
    done < "$childList"
  else
    rc=1
  fi

  rm --force "$childList"
  return "$rc"
}


prune_collection()
{
  local trashTempFiles="$1"
  local collection="$2"

  local rc=0

  local collDoTot
  if ! collDoTot=$(count_data "$collection")
  then
    rc=1
  elif [[ "$collDoTot" -eq 0 ]]
  then
    if irm -f -r -v "$collection"
    then
      printf 'Deleted collection %s\n' "$collection"
    else
      rc=1
    fi
  else
    if ! prune_children "$trashTempFiles" "$collection"
    then
      rc=1
    fi
  fi

  if [[ "$rc" -ne 0 ]]
  then
    printf 'Failed to prune %s\n' "$collection" >&2
  fi

  return "$rc"
}


count_data()
{
  local collection="$1"

  quest '%s' "select count(DATA_ID) where COLL_NAME = '$collection' || like '$collection/%'"
}


mk_temp()
{
  local trashTempFiles="$1"

  mktemp | tee --append "$trashTempFiles"
}


quest()
{
  local fmt="$1"
  local query="$2"

  iquest --no-page "$fmt" "$query" \
    | sed '/^CAT_NO_ROWS_FOUND: Nothing was found matching your query$/d'
}


truncate_by_time()
{
  local upperBound="$1"

  local dataObj modifyTs
  while read -r modifyTs dataObj
  do
    if [[ "${modifyTs#0}" -lt "$upperBound" ]]
    then
      printf '%s %s\n' "$modifyTs" "$dataObj"
    fi
  done
}


RM_DATA_BATCH()
{
  trap 'kill -TERM "$PARALLEL_PID"; sleep 1; kill -HUP "$PARALLEL_PID"' TERM

  if ! stdbuf --error L --output L irm -f -v "$@" 2> >(MK_RM_ERRS) | MK_RM_MSGS "$@"
  then
    exit 1
  fi

  exit 0
}
export -f RM_DATA_BATCH


MK_RM_ERRS()
{
  local line
  while IFS= read -r line
  do
    printf 'UNKNOWN ERROR: %s\n' "$line" >&2
    kill -TERM "$$"
  done
}
export -f MK_RM_ERRS


MK_RM_MSGS()
{
  local paths=("$@")
  local idx=0

  local line
  while IFS= read -r line
  do
    local nameBeg
    nameBeg=$(expr "$line" : '^   \(.*[^ ]\)  *[0-9][0-9]*\.[0-9][0-9][0-9] sec$')

    local dur
    dur=$(expr "$line" : '.*\([0-9][0-9]*\.[0-9][0-9][0-9]\) sec$')

    local resolved=
    while [[ "$idx" -lt "${#paths[@]}" ]]
    do
      local path="${paths[$((idx++))]}"

      local name
      name=$(basename "$path")

      if [[ "$name" =~ ^"$nameBeg" ]]
      then
        resolved="$path"
        break
      fi
    done

    if [[ -z "$resolved" ]]
    then
      printf 'Could not resolve path of %s\n' "$nameBeg" >&2
      resolved="$nameBeg"
    fi

    printf 'took %s s to delete data object %s\n' "$dur" "$resolved"
  done
}
export -f MK_RM_MSGS


main "$@"
