#!/bin/bash
#
# This script deletes the trash older than one month. It deletes the oldest trash first.

set -u


main()
{
  local trashTempFiles
  trashTempFiles=$(mktemp)

  # shellcheck disable=SC2064
  trap "rm_temps '$trashTempFiles'" EXIT

  local upperBound
  upperBound=$(date --date "$(date --iso-8601 --date '1 month ago')" '+%s')

  local trashList
  trashList=$(mk_temp "$trashTempFiles")

  # Build the list of data objects to delete, sorted by age
  printf 'Retrieving data objects to delete...\n'

  quest '%s %s/%s' \
        "select max(DATA_MODIFY_TIME), COLL_NAME, DATA_NAME
         where COLL_NAME like '/iplant/trash/%'" \
    | sort --numeric --key 1,1 \
    | truncate_by_time "$upperBound" \
    | cut --delimiter ' ' --fields 2- \
    > "$trashList"

  local delTot

  delTot=$(wc --lines < "$trashList")
  printf '%d data objects to delete\n' "$delTot"

  xargs --no-run-if-empty --delimiter '\n' irm -f -v < "$trashList"

  # Remove the empty trash collections
  printf 'Retrieving home collections to prune...\n'
  quest '%s' "select COLL_NAME where COLL_PARENT_NAME = '/iplant/trash/home'" > "$trashList"
  quest '%s' "select COLL_NAME where COLL_PARENT_NAME = '/iplant/trash/orphan'" >> "$trashList"
  delTot=$(wc --lines < "$trashList")
  printf '%d home collections to prune\n' "$delTot"

  while read -r parent
  do
    printf 'Pruning %s...\n' "$parent"
    prune_children "$trashTempFiles" "$parent"
  done < "$trashList"

  rm --force "$trashList"
}


mk_temp()
{
  local trashTempFiles="$1"

  mktemp | tee --append "$trashTempFiles"
}


prune_children()
{
  local trashTempFiles="$1"
  local parent="$2"

  local childList
  childList=$(mk_temp "$trashTempFiles")
  quest '%s' "select COLL_NAME where COLL_PARENT_NAME = '$parent'" > "$childList"

  while read -r collection
  do
    prune_collection "$trashTempFiles" "$collection"
  done < "$childList"

  rm --force "$childList"
}


prune_collection()
{
  local trashTempFiles="$1"
  local collection="$2"

  local collDoTot
  collDoTot=$(quest '%s' "select count(DATA_ID) where COLL_NAME = '$collection'")

  if [ "$collDoTot" -eq 0 ]
  then
    collDoTot=$(quest '%s' "select count(DATA_ID) where COLL_NAME like '$collection/%'")
  fi

  if [ "$collDoTot" -eq 0 ]
  then
    if irm -f -r -v "$collection"
    then
      printf 'Deleted collection %s\n' "$collection"
    fi
  else
    prune_children "$trashTempFiles" "$collection"
  fi
}


quest()
{
  local fmt="$1"
  local query="$2"

  iquest --no-page "$fmt" "$query" \
    | sed '/^CAT_NO_ROWS_FOUND: Nothing was found matching your query$/d'
}


rm_temps()
{
  local trashTempFiles="$1"

  xargs --no-run-if-empty rm --force < "$trashTempFiles"
  rm --force "$trashTempFiles"
}


truncate_by_time()
{
  local upperBound="$1"

  while read -r modifyTs dataObj
  do
    if [ "$modifyTs" -ge "$upperBound" ]
    then
      break
    fi

    printf '%s %s\n' "$modifyTs" "$dataObj"
  done
}


main
