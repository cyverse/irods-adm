#!/usr/bin/env bash
#
# find-missing-replicas version 1
#
# Usage:
#  find-missing-replicas
#
# This script attempts to locate physical files for replicas that have bad
# paths. It reads a list of data objects from stdin whose only replica has a bad
# path. Each data object is specified by its absolute, logical path, one per
# line.
#
# Â© 2025 The Arizona Board of Regents on behalf of The University of Arizona.
# For license information, see https://cyverse.org/license.

set -o nounset -o errexit -o pipefail

EXEC_DIR="$(dirname "$(realpath --canonicalize-existing "$0")")"
readonly EXEC_DIR

main() {
	local dataPath
	while IFS= read -r dataPath; do
		printf '%s\n' "$dataPath"

		local attrs_per_repl
		readarray attrs_per_repl < <(get_physical_attributes "$dataPath")

		local attrs
		for attrs in "${attrs_per_repl[@]}"; do
			local rescHier size chksum formerFilePath
			IFS=$'\t' read -r rescHier size chksum formerFilePath <<<"$attrs"
			rescHier="${rescHier//\"/}"
			size="${size//\"/}"
			chksum="${chksum//\"/}"
			formerFilePath="${formerFilePath//\"/}"

			local server
			server="$(get_server "${rescHier##*;}")"

			local foundPath
			if ! foundPath="$(find_real_path "$server" "$formerFilePath" "$size" "$chksum")"; then
				printf '\tCannot locate physical file in %s for %s\n' "$rescHier" "$dataPath" >&2
				continue
			fi

			if [[ "$foundPath" == "$formerFilePath" ]]; then
				continue
			fi

			if ! restore_path "$server" "$foundPath" "$formerFilePath"; then
				printf '\tCannot restore physical file in %s for %s: found %s\n' \
						"$rescHier" "$dataPath" "$foundPath" \
					>&2
			fi
		done
	done 2>&1
}

find_real_path() {
	local server="$1"
	local pathRoot="$2"
	local expSize="$3"
	local expChksum="$4"

	# shellcheck disable=SC2087
	ssh -q -t "$server" <<EOF
check() {
	local root="\$1"

	local candidates
	readarray -t candidates < <(ls --sort=time "\$root".* 2> /dev/null)

	for candidate in "\${candidates[@]}"; do
		if [[ "$expSize" == "\$(stat --format='%s' "\$candidate")" ]]; then
			if [[ -z "$expChksum" ]] || md5sum --check --status <<<"$expChksum \$candidate"; then
				echo "\$candidate"
				return 0
			fi
		fi
	done

	return 1
}

orphanRoot="${pathRoot/home/orphan/home}"
replicaRoot="${pathRoot/home/replica/home}"

for candidate in "$pathRoot" "\$orphanRoot" "\$replicaRoot"; do
	if path="\$(check "\$candidate")"; then
		break
	fi
done

if [[ -n "\$path" ]]; then
	echo "\$path"
	exit 0
else
	exit 1
fi
EOF
}

get_physical_attributes() {
	local dataPath="$1"

	"$EXEC_DIR"/quest $'"%s"\t"%s"\t"%s"\t"%s"' <<EOF
select DATA_RESC_HIER, DATA_SIZE, DATA_CHECKSUM, DATA_PATH
where COLL_NAME = '$(dirname "$dataPath")' and DATA_NAME = '$(basename "$dataPath")'
EOF
}

get_server() {
	local resc="$1"

	"$EXEC_DIR"/quest %s <<<"select RESC_LOC where RESC_NAME = '$resc'"
}

restore_path() {
	local server="$1"
	local foundPath="$2"
	local missingPath="$3"

	# shellcheck disable=SC2087
	ssh -q -t "$server" \
<<EOF
mv --no-clobber "$foundPath" "$missingPath"
EOF
}

trim_all() {
	local str="$*"

	set -o noglob

	# shellcheck disable=SC2086
	set -- $str

	printf '%s\n' "$*"
	set +o noglob
}

main "$@"
