#!/usr/bin/env bash
#
# find-missing-replicas version 1
#
# Usage:
#  find-missing-replicas
#
# This script attempts to locate physical files for replicas that have bad 
# paths. It reads a list of data objects from stdin whose only replica has a bad
# path. Each data object is specified by its absolute, logical path, one per 
# line. The script assumes each data object has only one replica.

set -o nounset -o errexit -o pipefail

main() {
	local dataPath
	while IFS= read -r dataPath; do
		printf '%s\n' "$dataPath"
   
		local rescHier size chksum formerFilePath
		IFS=$'\t' read -r rescHier size chksum formerFilePath \
			<<<"$(get_physical_attributes "$dataPath")"

		rescHier="${rescHier//\"/}"
		size="${size//\"/}"
		chksum="${chksum//\"/}"
		formerFilePath="${formerFilePath//\"/}"
    
		local server
		server=$(get_server "${rescHier##*;}")

		local foundPath
		if ! foundPath=$(find_real_path "$server" "$formerFilePath" "$size" "$chksum"); then
			printf 'Cannot locate physical file for %s\n' "$dataPath" >&2
			continue
		fi

		if ! restore_path "$server" "$foundPath" "$formerFilePath"; then
			printf 'Cannot restore physical file for %s: found %s\n' "$dataPath" "$foundPath" >&2
			continue
		fi
	done 2>&1
}

find_real_path() {
	local server="$1"
	local pathRoot="$2"
	local expSize="$3"
	local expChksum="$4"

	local orphanRoot="${pathRoot/home/orphan/home}"
	local replicaRoot="${pathRoot/home/replica/home}"

	# shellcheck disable=SC2087
	ssh -q -t "$server" \
<<EOF
check() {
	local root="\$1"
    
	local candidates
	readarray -t candidates < <(ls --sort=time "\$root".* 2> /dev/null)

	for candidate in "\${candidates[@]}"; do
		if [[ "$expSize" == "\$(stat --format='%s' "\$candidate")" ]]; then
			if [[ -z "$expChksum" ]] || md5sum --check --status <<<"$expChksum \$candidate"; then
				echo "\$candidate"
				return 0
			fi
		fi
	done

	return 1
}


if ! path="\$(check "$orphanRoot")"; then
	path="\$(check "$replicaRoot")"
fi

if [[ -n "\$path" ]]; then
	echo "\$path"
	exit 0
else
	exit 1
fi
EOF
}

get_physical_attributes() {
	local dataPath="$1"

	local collPath
	collPath=$(dirname "$dataPath")

	local dataName
	dataName=$(basename "$dataPath")

	local query="select DATA_RESC_HIER, DATA_SIZE, DATA_CHECKSUM, DATA_PATH 
						where COLL_NAME = '$collPath' and DATA_NAME = '$dataName'"

	quest $'"%s"\t"%s"\t"%s"\t"%s"' "$query"
}

get_server() {
	local resc="$1"

	quest '%s' "select RESC_LOC where RESC_NAME = '$resc'"
}

restore_path() {
	local server="$1"
	local foundPath="$2"
	local missingPath="$3"

	# shellcheck disable=SC2087
	ssh -q -t "$server" \
<<EOF
mv --no-clobber "$foundPath" "$missingPath"
EOF
}

quest() {
	local fmt="$1"
	local query="$2"

	local result
	result=$(iquest --no-page "$fmt" "$(trim_all "$query")")

	if [[ "$result" =~ ^CAT_NO_ROWS_FOUND: ]]; then
		return 1
	fi

	echo "$result"
}

trim_all() {
	local str="$*"

	set -o noglob

	# shellcheck disable=SC2086
	set -- $str

	printf '%s\n' "$*"
	set +o noglob
}


main "$@"
