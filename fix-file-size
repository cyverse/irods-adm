#!/usr/bin/env bash

show_help() {
	cat <<EOF

$ExecName version $Version

Usage:
 $ExecName [options]

Updates the ICAT size information for the replicas of a set of data objects

Options:

 -h, --help           show help and exit
 -J, --jobs NUM-JOBS  the number of fixes to perform simultaneously
 -v, --version        show version and exit

Summary:
It reads a list of data object paths, one per line, from standard in. For each
replica, it updates the ICAT size information based on the size of the
corresponding file in storage.  No object name may have a carriage return in its
path. The user must be initialized with iRODS as an admin user. Finally, the
user must have passwordless access to the root account on the relevant storage
resources.
EOF
}


readonly Version=2

set -o errexit -o nounset -o pipefail

readonly ExecPath=$(readlink --canonicalize "$0")
readonly ExecName=$(basename "$ExecPath")


main() {
	if ! opts=$(getopt --name "$ExecName" --options hJ:v --longoptions help,jobs:,version -- "$@")
	then
		printf '\n' >&2
		show_help >&2
		exit 1
	fi

	eval set -- "$opts"

	local jobs
	while true
	do
		case "$1" in
			-h|--help)
				show_help
				exit 0
				;;
			-J|--jobs)
				jobs="$2"
				shift 2
				;;
			-v|--version)
				show_version
				exit 0
				;;
			--)
				shift
				break
				;;
			*)
				show_help >&2
				exit 1
				;;
		esac
	done

	export EXEC_DIR
	EXEC_DIR=$(dirname "$ExecPath")

	if [ -n "${jobs-}" ]
	then
		readonly JobsOpt=-j"$jobs"
	else
		readonly JobsOpt=
	fi

	parallel --eta --no-notice --delimiter '\n' --max-args 1 "$JobsOpt" FIX > /dev/null
}


show_version() {
	printf '%s\n' "$Version"
}


FIX() {
	local objPath="$1"

	set -o errexit -o nounset -o pipefail

	exec_on_rs() {
		local rs="$1"
		local cmd="$2"

		#shellcheck disable=SC2087
		ssh -q -t "$rs" \
			'if [[ "$USER" == irods ]]; then $cmd; else sudo -i -u irods <<EOSUDO
$cmd
EOSUDO
fi'
	}

	get_icat_size() {
		local collPath="$1"
		local objName="$2"
		local rescHier="$3"
		query_icat \
			'%s' \
			"select DATA_SIZE 
				where COLL_NAME = '$collPath' 
					and DATA_NAME = '$objName' 
					and DATA_RESC_HIER = '$rescHier'"
	}

	query_icat() {
		local fmt="$1"
		local query="$2"

		# NB: Due to a bug in iRODS, 
		#     https://github.com/irods/irods_client_icommands/issues/281,
		#     horizontal tabs in the query need to be replaced by spaces
		query="${query//$'\t'/ }"

		iquest "$fmt" "$query" | sed '/CAT_NO_ROWS_FOUND: /d'
	}

	mk_physical_size_cmd() {
		local filePath="$1"

		cat <<CMD
stat --format '%s' "$filePath"
CMD
	}

	local fixed

	printf '%s\n' "$objPath"

	local collPath objName
	collPath="$(dirname "$objPath")"
	objName="$(basename "$objPath")"

	local phyicalSize rescHier storeHost filePath
	while read -r physicalSize rescHier storeHost filePath
	do
		fixed=

		local icatSize
		if ! icatSize="$(get_icat_size "$collPath" "$objName" "$rescHier")"; then
			contine
		fi

		local coordResc="${rescHier%%;*}"

		local sizeCmd
		if ! sizeCmd="$(mk_physical_size_cmd "$filePath")"; then
			return 1
		fi

		local size
		if ! size="$(exec_on_rs "$storeHost" "$sizeCmd")"
		then
			break
		fi

		if ! iadmin modrepl logical_path "$objPath" resource_hierarchy "$rescHier" DATA_SIZE "$size"
		then
			break
		fi

		fixed="$objPath"
	done < <("$EXEC_DIR"/get-replicas "$objPath") >&2

	if [[ -z "${fixed-}" ]]
	then
		printf 'ERROR: failed to fix %s\n' "$objPath" >&2
		exit 1
	fi
}
export -f FIX


main "$@"
